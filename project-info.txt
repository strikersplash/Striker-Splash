striker-splash/
‚îÇ
‚îú‚îÄ‚îÄ .env                      # Environment variables (e.g., DB URL)
‚îú‚îÄ‚îÄ .gitignore                # Ignores node_modules, .env, etc.
‚îú‚îÄ‚îÄ package.json              # NPM dependencies and scripts
‚îú‚îÄ‚îÄ tsconfig.json             # TypeScript config
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app.ts                # Express app configuration
‚îÇ   ‚îú‚îÄ‚îÄ server.ts             # Entry point to start server
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ db.ts             # Database connection setup
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ loginController.ts         # Handles login/logout
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ player/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ transactionController.ts   # Payment + QR + confirmation
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profileController.ts       # Player profile info
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ staff/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ interfaceController.ts     # Scan & log goal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ homeController.ts          # Scrollable home page sections
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ system/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ errorController.ts         # Unified 404/500 handler
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                   # Login/logout routes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ player/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                   # Dashboard, QR, payment
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ staff/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                   # Worker route to log hits
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                   # Homepage and leaderboard
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ system/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ error.ts                   # Catch-all errors
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Player.ts                      # Player info + QR code
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Shot.ts                        # Payment logs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameStat.ts                    # Goal logs
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Staff.ts                       # Staff login model
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ views/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ home.ejs                   # Unified homepage
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.ejs                  # Login page
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth-flow.ejs             # Forgot + Reset in one screen
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ player/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard.ejs             # View QR, stats
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ transaction.ejs           # Pay + QR + confirmation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ staff/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ interface.ejs             # Log hits (scan QR)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dashboard.ejs             # Optional: Admin panel
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ system/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ error.ejs                 # 404/500/etc.
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ partials/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ navbar.ejs
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ footer.ejs
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ style.css                 # Main stylesheet
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.js                   # Frontend scripts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ images/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ README.txt                # Store mascot/logo/etc.


üß© What is Striker Splash?

Striker Splash is a travelling, football-themed dunk tank attraction. Players:

    Buy shots

    Are assigned a QR code

    Get their goals logged

    Compete on local and national leaderboards

The system includes:

    A public site (homepage, leaderboard, how-to)

    A player portal (registration, QR, payment)

    A staff interface (verify player, log goals)

    A simple admin interface (optional)

    QR-based gameplay tracking

    Real-time leaderboard updates

üìã Phase-by-Phase Breakdown

Each step contains frontend, backend, and error handling expectations.
‚úÖ Phase 1: Branding & Setup (Week 1)
Goals:

    Logo, mascot (Otto), and palette created

    Domain + hosting setup (Render, Neon, etc.)

    GitHub repo initialized with starter folder structure

Deliverables:

    public/images/otto-logo.png

    src/public/css/style.css

    Basic Express + TypeScript + EJS project scaffolded

‚úÖ Phase 2: App Skeleton & Responsive Layout (Week 2)
Backend

    Set up src/app.ts and src/server.ts

    Middleware: body-parser, express-session, helmet

    Session + flash setup

Frontend

    views/public/home.ejs scrollable layout:

        #welcome

        #how-to-play

        #leaderboard (empty for now)

        #about-us

Error Handling

    Create system/error.ejs (for 404/500)

    Catch all unknown routes

app.use((req, res) => {
  res.status(404).render('system/error', { code: 404, message: 'Not found' });
});

‚úÖ Phase 3: Player Portal & QR Code Generation (Week 3)
Backend

    Model: Player.ts with fields:

        id, name, phone, dob, residence, qrHash, ageGroup, photoPath

    Services:

        qrService.ts (generates and saves QR image)

        registrationService.ts (validates + stores player)

    Routes:

        POST /player/register

        GET /player/dashboard

    QR Code: Generated upon registration or payment

Frontend

    views/player/transaction.ejs handles:

        Name, phone, DOB form

        QR Code display

        "Payment successful" message

Error Handling

    Validate unique phone #

    Age under 13 must show guardian fields

    Catch form errors, missing fields, QR generation failures

‚úÖ Phase 4: Staff Interface & Score Logging (Week 4)
Backend

    Model: GameStat.ts (player ID, time, goals)

    Auth:

        Staff.ts for login

        middleware/auth.ts to protect routes

    Controller: interfaceController.ts

    Routes:

        GET /staff/interface (scan QR, log goal)

Frontend

    views/staff/interface.ejs:

        QR input field or scan

        Display player info

        Log hit or miss buttons

Error Handling

    Invalid QR? ‚Üí Show message: "Player not found"

    Log goal fails? ‚Üí Flash error

‚úÖ Phase 5: Leaderboards & Public Pages (Week 5)
Backend

    Service: leaderboardService.ts (top players by age group/location)

    Route: GET /leaderboard

    Optional caching (to improve load time)

Frontend

    #leaderboard section on home

        Filter dropdowns: by town, district, age group

        Default: National top 10

Error Handling

    No scores ‚Üí Show placeholder

    Empty group ‚Üí Message: ‚ÄúBe the first!‚Äù

‚úÖ Phase 6: Testing, Training, Deployment (Week 6)
Backend

    Unit tests: model functions, services (e.g. QR generation, leaderboard calc)

    Error logging: fallback for try/catch blocks, e.g. in QR or DB logic

Frontend

    Test:

        Small screen

        Tablet

        Desktop

    Final polish:

        CSS cleanup

        EJS partials for consistent headers, footers

Deployment

    Use Render or VPS

    Enable HTTPS with SSL

    Set up .env with production DB, session secrets