<div class="container mt-5">
  <div class="row">
    <div class="col-md-12">
      <div class="card">
        <div
          class="card-header bg-primary text-white d-flex justify-content-between align-items-center"
        >
          <h3 class="mb-0"><i class="fas fa-users"></i> Browse Teams</h3>
          <a href="/player/teams/create" class="btn btn-success">
            <i class="fas fa-plus"></i> Create New Team
          </a>
        </div>
        <div class="card-body">
          <!-- Search and Filters -->
          <div class="row mb-4">
            <div class="col-md-4">
              <div class="input-group">
                <input
                  type="text"
                  class="form-control"
                  id="search-input"
                  placeholder="Search teams..."
                />
                <button
                  class="btn btn-outline-primary"
                  type="button"
                  id="search-btn"
                >
                  <i class="fas fa-search"></i>
                </button>
              </div>
            </div>
            <div class="col-md-3">
              <select class="form-select" id="size-filter">
                <option value="">All Sizes</option>
                <option value="3">3-a-side</option>
                <option value="5">5-a-side</option>
                <option value="10">10-a-side</option>
                <option value="11">11-a-side</option>
              </select>
            </div>
            <div class="col-md-3">
              <select class="form-select" id="status-filter">
                <option value="">All Teams</option>
                <option value="open">Open for Recruitment</option>
                <option value="full">Full Teams</option>
              </select>
            </div>
            <div class="col-md-2">
              <button
                class="btn btn-outline-secondary w-100"
                id="reset-filters"
              >
                <i class="fas fa-times"></i> Reset
              </button>
            </div>
          </div>

          <!-- Teams Grid -->
          <div id="teams-container">
            <div class="row" id="teams-grid">
              <% if (teams && teams.length > 0) { %> <% teams.forEach(team => {
              %>
              <div
                class="col-md-6 col-lg-4 mb-4 team-card"
                data-size="<%= team.team_size %>"
                data-status="<%= team.current_members >= team.team_size ? 'full' : 'open' %>"
              >
                <div
                  class="card h-100 <%= team.current_members >= team.team_size ? 'border-secondary' : 'border-success' %>"
                >
                  <div
                    class="card-header d-flex justify-content-between align-items-center"
                  >
                    <h6 class="mb-0 text-truncate" title="<%= team.name %>">
                      <%= team.name %>
                    </h6>
                    <span
                      class="badge <%= team.current_members >= team.team_size ? 'bg-secondary' : 'bg-success' %>"
                    >
                      <%= team.team_size %>-a-side
                    </span>
                  </div>
                  <div class="card-body">
                    <% if (team.description) { %>
                    <p class="card-text text-muted small">
                      <%= team.description.length > 100 ?
                      team.description.substring(0, 100) + '...' :
                      team.description %>
                    </p>
                    <% } %>

                    <div class="mb-3">
                      <div
                        class="d-flex justify-content-between align-items-center mb-2"
                      >
                        <small class="text-muted">Members</small>
                        <small class="text-muted">
                          <%= team.current_members %>/<%= team.team_size %>
                        </small>
                      </div>
                      <div class="progress">
                        <% const percentage = (team.current_members /
                        team.team_size) * 100 %>
                        <div
                          class="progress-bar <%= percentage >= 100 ? 'bg-secondary' : 'bg-success' %>"
                          role="progressbar"
                          style="width: <%= Math.min(percentage, 100) %>%"
                          aria-valuenow="<%= percentage %>"
                          aria-valuemin="0"
                          aria-valuemax="100"
                        ></div>
                      </div>
                    </div>

                    <% if (team.created_at) { %>
                    <p class="card-text">
                      <small class="text-muted">
                        <i class="fas fa-calendar"></i>
                        Created <%= new
                        Date(team.created_at).toLocaleDateString() %>
                      </small>
                    </p>
                    <% } %>
                  </div>
                  <div class="card-footer">
                    <% if (team.current_members >= team.team_size) { %>
                    <button class="btn btn-secondary w-100" disabled>
                      <i class="fas fa-users"></i> Team Full
                    </button>
                    <% } else if (playerTeam && playerTeam.id === team.id) { %>
                    <button class="btn btn-primary w-100" disabled>
                      <i class="fas fa-check"></i> Your Team
                    </button>
                    <% } else if (playerTeam) { %>
                    <button class="btn btn-outline-warning w-100" disabled>
                      <i class="fas fa-exclamation-triangle"></i> Already in
                      Team
                    </button>
                    <% } else { %>
                    <button
                      class="btn btn-success w-100"
                      onclick="openJoinModal('<%= team.id %>')"
                    >
                      <i class="fas fa-user-plus"></i> Request to Join
                    </button>
                    <% } %>
                  </div>
                </div>
              </div>
              <% }); %> <% } else { %>
              <div class="col-12">
                <div class="alert alert-info text-center">
                  <i
                    class="fas fa-users"
                    style="font-size: 3rem; color: #ccc"
                  ></i>
                  <h4 class="mt-3">No teams found</h4>
                  <p class="text-muted">Be the first to create a team!</p>
                  <a href="/player/teams/create" class="btn btn-success">
                    <i class="fas fa-plus"></i> Create Team
                  </a>
                </div>
              </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Join Request Modal - CUSTOM NO BACKDROP -->
<div
  id="joinRequestModal"
  style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; width: 90%; max-width: 500px;"
>
  <div class="card shadow-lg border-0">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">Request to Join Team</h5>
      <button
        type="button"
        class="btn-close btn-close-white float-end"
        onclick="closeJoinModal()"
        aria-label="Close"
      ></button>
    </div>
    <div class="card-body">
      <p>Would you like to send a request to join this team?</p>
      <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        The team admin will be notified and can approve or decline your
        request.
      </div>
      <div class="mb-3">
        <label for="join-message" class="form-label"
          >Message (Optional)</label
        >
        <textarea
          class="form-control"
          id="join-message"
          rows="3"
          placeholder="Let the team know you're excited to join..."
        ></textarea>
      </div>
    </div>
    <div class="card-footer d-flex justify-content-end gap-2">
      <button type="button" class="btn btn-secondary" onclick="closeJoinModal()">
        Cancel
      </button>
      <button type="button" class="btn btn-success" id="confirm-join-request">
        <i class="fas fa-paper-plane"></i> Send Request
      </button>
    </div>
  </div>
</div>

<script>
  let selectedTeamId = null;

  // Simple modal without Bootstrap - NO BACKDROP
  window.openJoinModal = function (teamId) {
    selectedTeamId = teamId;
    document.getElementById("joinRequestModal").style.display = "block";
  };

  window.closeJoinModal = function () {
    document.getElementById("joinRequestModal").style.display = "none";
    document.getElementById("join-message").value = "";
  };  // Direct form replacement - no modals
  window.directJoinForm = function (teamId, teamName) {
    const button = event.target.closest("button");
    const footer = button.closest(".card-footer");

    button.style.display = "none";

    footer.innerHTML += `
      <div class="direct-join-form border rounded p-2 mt-2 bg-light">
        <strong>Join ${teamName}</strong>
        <textarea class="form-control form-control-sm mt-2" id="msg-${teamId}" placeholder="Optional message" rows="2"></textarea>
        <div class="mt-2 d-flex gap-1">
          <button class="btn btn-sm btn-secondary" onclick="cancelJoin('${teamId}')">Cancel</button>
          <button class="btn btn-sm btn-success" onclick="sendJoin('${teamId}')">Send Request</button>
        </div>
      </div>
    `;
  };

  window.cancelJoin = function (teamId) {
    location.reload();
  };

  window.sendJoin = function (teamId) {
    const msg = document.getElementById("msg-" + teamId).value;

    fetch("/player/teams/join-request", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ teamId: teamId, message: msg }),
    })
      .then((response) => response.json())
      .then((result) => {
        if (result.success) {
          alert("Request sent!");
          location.reload();
        } else {
          alert("Error: " + (result.message || "Failed"));
        }
      })
      .catch(() => alert("Network error"));
  };

  // Aggressive cleanup function for all modal issues
  function forceModalCleanup() {
    // Remove ALL possible backdrop elements
    document
      .querySelectorAll(".modal-backdrop, .custom-modal-backdrop")
      .forEach((el) => el.remove());

    // Reset ALL body classes and styles
    document.body.classList.remove("modal-open");
    document.body.style.overflow = "";
    document.body.style.paddingRight = "";
    document.body.style.marginRight = "";

    // Clean html element
    document.documentElement.classList.remove("modal-open");
    document.documentElement.style.overflow = "";

    // Dispose all modal instances
    document.querySelectorAll(".modal").forEach((modalEl) => {
      const instance = bootstrap.Modal.getInstance(modalEl);
      if (instance) {
        instance.dispose();
      }
    });
  }

  // Clean up any lingering modal backdrops on page load (mobile issue fix)
  document.addEventListener("DOMContentLoaded", function () {
    // Aggressive cleanup on page load
    forceModalCleanup();

    // Add emergency escape handler - single tap anywhere to cleanup stuck modals
    document.addEventListener("touchstart", function (e) {
      // Check if we have a stuck backdrop without visible modal
      const hasBackdrop = document.querySelector(
        ".modal-backdrop, .custom-modal-backdrop"
      );
      const hasOpenModal = document.querySelector(".modal.show");

      if (hasBackdrop && !hasOpenModal) {
        // Stuck backdrop detected - force cleanup
        forceModalCleanup();
        console.log("Emergency modal cleanup triggered by touch");
      }
    });

    // Also add click handler for desktop
    document.addEventListener("click", function (e) {
      // Only cleanup if clicking outside any modal content
      if (!e.target.closest(".modal-content")) {
        const hasBackdrop = document.querySelector(
          ".modal-backdrop, .custom-modal-backdrop"
        );
        const hasOpenModal = document.querySelector(".modal.show");

        if (hasBackdrop && !hasOpenModal) {
          forceModalCleanup();
          console.log("Emergency modal cleanup triggered by click");
        }
      }
    });
  });

  // Search functionality
  document.getElementById("search-btn").addEventListener("click", filterTeams);
  document
    .getElementById("search-input")
    .addEventListener("keyup", function (e) {
      if (e.key === "Enter") {
        filterTeams();
      }
    });

  // Filter functionality
  document
    .getElementById("size-filter")
    .addEventListener("change", filterTeams);
  document
    .getElementById("status-filter")
    .addEventListener("change", filterTeams);

  // Reset filters
  document
    .getElementById("reset-filters")
    .addEventListener("click", function () {
      document.getElementById("search-input").value = "";
      document.getElementById("size-filter").value = "";
      document.getElementById("status-filter").value = "";
      filterTeams();
    });

  function filterTeams() {
    const search = document.getElementById("search-input").value.toLowerCase();
    const sizeFilter = document.getElementById("size-filter").value;
    const statusFilter = document.getElementById("status-filter").value;

    const teamCards = document.querySelectorAll(".team-card");

    teamCards.forEach((card) => {
      const teamName = card
        .querySelector(".card-header h6")
        .textContent.toLowerCase();
      const teamSize = card.dataset.size;
      const teamStatus = card.dataset.status;

      let show = true;

      // Search filter
      if (search && !teamName.includes(search)) {
        show = false;
      }

      // Size filter
      if (sizeFilter && teamSize !== sizeFilter) {
        show = false;
      }

      // Status filter
      if (statusFilter && teamStatus !== statusFilter) {
        show = false;
      }

      card.style.display = show ? "block" : "none";
    });
  }

  function requestToJoin(teamId) {
    console.log("requestToJoin called with teamId:", teamId);
    console.log("Window width:", window.innerWidth);

    // ALWAYS use inline form - no modals at all
    showInlineJoinForm(teamId);
  }

  function showInlineJoinForm(teamId) {
    // Remove any existing inline forms first
    document
      .querySelectorAll(".mobile-join-form")
      .forEach((form) => form.remove());

    // Find the clicked button to get the right card
    const allButtons = document.querySelectorAll(
      'button[onclick*="requestToJoin"]'
    );
    let targetButton = null;
    allButtons.forEach((btn) => {
      if (btn.getAttribute("onclick").includes(teamId)) {
        targetButton = btn;
      }
    });

    if (!targetButton) return;

    // Get the card footer where the button is
    const cardFooter = targetButton.closest(".card-footer");
    if (!cardFooter) return;

    // Hide the button
    targetButton.style.display = "none";

    // Create inline form
    const formHTML = `
      <div class="mobile-join-form border rounded p-3 bg-light">
        <h6 class="mb-2">
          <i class="fas fa-user-plus text-success"></i> Request to Join Team
        </h6>
        <p class="small text-muted mb-3">
          <i class="fas fa-info-circle"></i>
          The team admin will be notified and can approve or decline your request.
        </p>
        <div class="mb-3">
          <label class="form-label small fw-bold">Message (Optional)</label>
          <textarea 
            class="form-control form-control-sm" 
            id="mobile-message-${teamId}" 
            rows="2" 
            placeholder="Let the team know you're excited to join..."
          ></textarea>
        </div>
        <div class="d-flex gap-2">
          <button 
            type="button" 
            class="btn btn-outline-secondary btn-sm flex-fill"
            onclick="cancelMobileJoin('${teamId}')"
          >
            <i class="fas fa-times"></i> Cancel
          </button>
          <button 
            type="button" 
            class="btn btn-success btn-sm flex-fill"
            onclick="submitMobileJoin('${teamId}')"
            id="mobile-submit-${teamId}"
          >
            <i class="fas fa-paper-plane"></i> Send
          </button>
        </div>
      </div>
    `;

    // Insert the form after the button
    cardFooter.insertAdjacentHTML("beforeend", formHTML);

    // Scroll into view smoothly
    const newForm = cardFooter.querySelector(".mobile-join-form");
    newForm.scrollIntoView({ behavior: "smooth", block: "nearest" });
  }

  // Global functions for mobile form
  window.cancelMobileJoin = function (teamId) {
    // Remove the form
    document
      .querySelectorAll(".mobile-join-form")
      .forEach((form) => form.remove());

    // Show the button again
    const allButtons = document.querySelectorAll(
      'button[onclick*="requestToJoin"]'
    );
    allButtons.forEach((btn) => {
      if (btn.getAttribute("onclick").includes(teamId)) {
        btn.style.display = "";
      }
    });
  };

  window.submitMobileJoin = function (teamId) {
    const submitBtn = document.getElementById(`mobile-submit-${teamId}`);
    const messageField = document.getElementById(`mobile-message-${teamId}`);

    if (!submitBtn || !messageField) return;

    // Show loading
    submitBtn.innerHTML =
      '<span class="spinner-border spinner-border-sm me-1"></span>Sending...';
    submitBtn.disabled = true;

    // Submit
    fetch("/player/teams/join-request", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        teamId: teamId,
        message: messageField.value,
      }),
    })
      .then((response) => response.json())
      .then((result) => {
        if (result.success) {
          showAlert("success", "Join request sent successfully!");
          setTimeout(() => location.reload(), 1500);
        } else {
          showAlert("danger", result.message || "Failed to send join request");
          submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
          submitBtn.disabled = false;
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        showAlert("danger", "An error occurred while sending the request");
        submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
        submitBtn.disabled = false;
      });
  };

  function showCustomModal() {
    // Create custom modal overlay
    const overlay = document.createElement("div");
    overlay.id = "custom-join-modal-overlay";
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      box-sizing: border-box;
    `;

    // Create modal content
    const modalContent = document.createElement("div");
    modalContent.style.cssText = `
      background: white;
      border-radius: 8px;
      width: 100%;
      max-width: 500px;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    `;

    modalContent.innerHTML = `
      <div style="padding: 20px; border-bottom: 1px solid #dee2e6;">
        <h5 style="margin: 0; font-weight: 600;">Request to Join Team</h5>
        <button id="custom-modal-close" style="
          position: absolute;
          top: 15px;
          right: 15px;
          background: none;
          border: none;
          font-size: 24px;
          cursor: pointer;
          color: #666;
        ">&times;</button>
      </div>
      <div style="padding: 20px;">
        <p style="margin-bottom: 15px;">Would you like to send a request to join this team?</p>
        <div style="
          background: #d1ecf1;
          border: 1px solid #bee5eb;
          border-radius: 4px;
          padding: 12px;
          margin-bottom: 20px;
          color: #0c5460;
        ">
          <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
          The team admin will be notified and can approve or decline your request.
        </div>
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 5px; font-weight: 500;">Message (Optional)</label>
          <textarea id="custom-join-message" placeholder="Let the team know you're excited to join..." style="
            width: 100%;
            min-height: 100px;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-family: inherit;
            resize: vertical;
          "></textarea>
        </div>
      </div>
      <div style="
        padding: 20px;
        border-top: 1px solid #dee2e6;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
      ">
        <button id="custom-modal-cancel" style="
          padding: 8px 16px;
          border: 1px solid #6c757d;
          background: white;
          color: #6c757d;
          border-radius: 4px;
          cursor: pointer;
        ">Cancel</button>
        <button id="custom-modal-confirm" style="
          padding: 8px 16px;
          border: none;
          background: #007bff;
          color: white;
          border-radius: 4px;
          cursor: pointer;
        ">
          <i class="fas fa-paper-plane" style="margin-right: 5px;"></i>
          Send Request
        </button>
      </div>
    `;

    overlay.appendChild(modalContent);
    document.body.appendChild(overlay);

    // Add event listeners
    document.getElementById("custom-modal-close").onclick = closeCustomModal;
    document.getElementById("custom-modal-cancel").onclick = closeCustomModal;
    document.getElementById("custom-modal-confirm").onclick =
      submitCustomJoinRequest;

    // Close on overlay click
    overlay.onclick = function (e) {
      if (e.target === overlay) {
        closeCustomModal();
      }
    };
  }

  function closeCustomModal() {
    const overlay = document.getElementById("custom-join-modal-overlay");
    if (overlay) {
      overlay.remove();
    }
  }

  function showBootstrapModal() {
    // Original Bootstrap approach for desktop
    const modalElement = document.getElementById("joinRequestModal");
    const modal = new bootstrap.Modal(modalElement, {
      backdrop: true,
      keyboard: true,
    });
    modal.show();
  }

  function submitCustomJoinRequest() {
    const confirmBtn = document.getElementById("custom-modal-confirm");
    const message = document.getElementById("custom-join-message").value;

    if (!selectedTeamId) return;

    // Show loading state
    confirmBtn.innerHTML =
      '<span style="display: inline-block; width: 16px; height: 16px; border: 2px solid #fff; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin-right: 5px;"></span>Sending...';
    confirmBtn.disabled = true;

    // Add CSS for spinner animation
    if (!document.getElementById("spinner-style")) {
      const style = document.createElement("style");
      style.id = "spinner-style";
      style.textContent =
        "@keyframes spin { to { transform: rotate(360deg); } }";
      document.head.appendChild(style);
    }

    // Submit request
    fetch("/player/teams/join-request", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        teamId: selectedTeamId,
        message: message,
      }),
    })
      .then((response) => response.json())
      .then((result) => {
        if (result.success) {
          closeCustomModal();
          showAlert("success", "Join request sent successfully!");
          setTimeout(() => {
            location.reload();
          }, 1500);
        } else {
          showAlert("danger", result.message || "Failed to send join request");
          confirmBtn.innerHTML =
            '<i class="fas fa-paper-plane" style="margin-right: 5px;"></i>Send Request';
          confirmBtn.disabled = false;
        }
      })
      .catch((error) => {
        console.error("Error sending join request:", error);
        showAlert("danger", "An error occurred while sending the request");
        confirmBtn.innerHTML =
          '<i class="fas fa-paper-plane" style="margin-right: 5px;"></i>Send Request';
        confirmBtn.disabled = false;
      });
  }

  // Handle join request confirmation
  document
    .getElementById("confirm-join-request")
    .addEventListener("click", async function () {
      if (!selectedTeamId) return;

      try {
        this.innerHTML =
          '<span class="spinner-border spinner-border-sm me-2"></span>Sending...';
        this.disabled = true;

        const message = document.getElementById("join-message").value;

        const response = await fetch("/player/teams/join-request", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            teamId: selectedTeamId,
            message: message,
          }),
        });

        const result = await response.json();

        if (result.success) {
          // Close our simple modal
          closeJoinModal();
          
          // Show success message
          showAlert("success", "Join request sent successfully!");

          // Optionally refresh the page or update the UI
          setTimeout(() => {
            location.reload();
          }, 1500);
        } else {
          showAlert("danger", result.message || "Failed to send join request");
        }
      } catch (error) {
        console.error("Error sending join request:", error);
        showAlert("danger", "An error occurred while sending the request");
      } finally {
        this.innerHTML = '<i class="fas fa-paper-plane"></i> Send Request';
        this.disabled = false;
      }
    });

  // Handle modal cancel/close buttons
  document.addEventListener("click", function (e) {
    if (
      e.target.matches('[data-bs-dismiss="modal"]') ||
      e.target.closest('[data-bs-dismiss="modal"]')
    ) {
      // Force cleanup when any modal close button is clicked
      setTimeout(forceModalCleanup, 100);
    }
  });

  function showAlert(type, message) {
    // Remove existing alerts
    const existingAlerts = document.querySelectorAll(".alert-floating");
    existingAlerts.forEach((alert) => alert.remove());

    // Create new alert
    const alertDiv = document.createElement("div");
    alertDiv.className = `alert alert-${type} alert-floating position-fixed`;
    alertDiv.style.cssText =
      "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
    alertDiv.innerHTML = `
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    ${message}
  `;

    document.body.appendChild(alertDiv);

    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 5000);
  }
</script>

<style>
  /* NO BACKDROPS AT ALL */
  .modal-backdrop {
    display: none !important;
  }

  /* Prevent body from being modified */
  body.modal-open {
    overflow: auto !important;
    padding-right: 0 !important;
  }

  /* Completely remove backdrop for join modal */
  .modal-backdrop {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
  }

  #joinRequestModal {
    background: none !important;
  }

  #joinRequestModal .modal-dialog {
    z-index: 1050 !important;
    position: relative !important;
  }

  .team-card {
    transition: transform 0.2s ease-in-out;
  }

  .team-card:hover {
    transform: translateY(-2px);
  }

  .card {
    transition: box-shadow 0.2s ease-in-out;
  }

  .card:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .progress {
    height: 8px;
  }

  .text-truncate {
    max-width: 150px;
  }

  /* Mobile modal fixes */
  @media (max-width: 768px) {
    .modal-dialog {
      margin: 1rem;
      max-width: calc(100% - 2rem);
    }

    .modal-content {
      border-radius: 0.5rem;
      z-index: 100001 !important;
      position: relative !important;
    }

    /* Fix for iOS Safari and Android modal issues */
    .modal-open {
      position: fixed;
      width: 100%;
      overflow: auto !important;
    }

    .modal-dialog-centered {
      min-height: calc(100% - 2rem);
    }

    /* Additional mobile backdrop fix */
    .modal-backdrop {
      display: none !important;
    }

    body.modal-open {
      overflow: auto !important;
      padding-right: 0 !important;
    }
  }

  /* Tablet specific fixes */
  @media (max-width: 992px) and (min-width: 769px) {
    .modal-dialog {
      max-width: 500px;
      margin: 1.75rem auto;
    }

    .modal-content {
      z-index: 100001 !important;
      position: relative !important;
    }

    .modal-backdrop {
      display: none !important;
    }

    body.modal-open {
      overflow: auto !important;
      padding-right: 0 !important;
    }
  }
</style>
