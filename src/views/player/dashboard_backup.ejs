<div class="container-fluid mt-3">
  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white py-2">
          <h4 class="mb-0">Player Dashboard</h4>
        </div>
        <div class="card-body p-2">
          <div class="row g-2">
            <!-- Left Column: Profile -->
            <div class="col-lg-3 col-md-4 col-12">
              <div class="card mb-2">
                <div class="card-body text-center py-2">
                  <div id="player-avatar-container" class="mb-2"></div>
                  <script>
                    // Create avatar using the robust avatar system
                    document.addEventListener("DOMContentLoaded", function () {
                      const avatarContainer = document.getElementById(
                        "player-avatar-container"
                      );
                      const avatar = createAvatar(
                        "<%= player.name %>",
                        80,
                        '<%= player.photo_path || "" %>'
                      );
                      avatar.classList.add("d-block", "mx-auto");
                      avatarContainer.appendChild(avatar);
                    });
                  </script>
                  <h5 class="mb-1">
                    <%= player.name %> <% if (player.is_child_account) { %>
                    <span class="badge bg-info ms-1">
                      <i class="bi bi-person-hearts"></i> Child Account
                    </span>
                    <% } %>
                  </h5>
                  <p class="text-muted mb-1 small">
                    <% if (player.is_child_account && player.parent_phone) { %>
                    <strong>Parent's Phone:</strong> <%= player.parent_phone
                    %><br />
                    <strong>Child ID:</strong> <%= player.phone %><br />
                    <% } else { %> <%= player.phone %><br />
                    <% } %> <%= player.email || '' %>
                  </p>
                  <p class="mb-1 small">
                    <strong>Location:</strong>
                    <% if (player.city_village) { %> <%= player.city_village %>,
                    <%= player.residence %> <% } else { %> <%= player.residence
                    %> <% } %>
                  </p>
                  <p class="mb-2 small">
                    <strong>Age Group:</strong> <%= player.age_group %>
                  </p>
                  <a
                    href="/player/edit-profile"
                    class="btn btn-outline-primary btn-sm"
                    >Edit Profile</a
                  >
                </div>
              </div>
            </div>

            <!-- Middle Column: QR, Notifications, Teams -->
            <div class="col-lg-3 col-md-4 col-12">
              <!-- QR Code Card - FORCED VISIBLE -->
              <div class="card mb-2">
                <div class="card-header bg-success text-white py-1">
                  <h6 class="mb-0">Your QR Code</h6>
                </div>
                <div class="card-body text-center py-2">
                  <% if (player.qr_code_path) { %>
                  <img
                    src="<%= player.qr_code_path %>"
                    alt="QR Code"
                    class="img-fluid mb-2"
                    style="max-width: 120px"
                  />
                  <% } else { %>
                  <img
                    src="/qr/<%= player.id %>"
                    alt="QR Code"
                    class="img-fluid mb-2"
                    style="max-width: 120px"
                  />
                  <% } %>
                  <p class="mb-2 small">
                    Show this QR code to the referee to log your goals.
                  </p>
                  <a
                    href="/player/download-qr"
                    class="btn btn-outline-success btn-sm"
                    >Download QR Code</a
                  >
                </div>
              </div>

              <!-- Notifications Card - FORCED VISIBLE -->
              <div class="card mb-2">
                <div
                  class="card-header bg-warning text-dark d-flex justify-content-between align-items-center py-1"
                >
                  <h6 class="mb-0">
                    <i class="bi bi-bell"></i> Notifications
                    <span
                      id="unread-count"
                      class="badge rounded-pill bg-danger"
                    ></span>
                  </h6>
                  <button
                    id="clear-all-notifications-btn"
                    class="btn btn-sm btn-outline-danger d-flex align-items-center"
                    style="display: none; gap: 0.25rem"
                    title="Clear all notifications"
                  >
                    <i class="bi bi-trash"></i>
                    <span class="d-none d-sm-inline">Clear All</span>
                  </button>
                </div>
                <div class="card-body py-2">
                  <div id="notifications-container">
                    <div class="d-flex justify-content-center">
                      <div
                        class="spinner-border spinner-border-sm text-primary"
                        role="status"
                      >
                        <span class="visually-hidden">Loading...</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Teams Section -->
              <div class="card mb-2">
                <div class="card-header bg-info text-white py-1">
                  <h6 class="mb-0"><i class="fas fa-users"></i> Teams</h6>
                </div>
                <div class="card-body py-2">
                  <% if (teamInfo) { %>
                  <!-- Player is in a team -->
                  <div
                    class="alert alert-success d-flex align-items-center py-1 mb-2"
                  >
                    <i
                      class="fas fa-check-circle me-2"
                      style="font-size: 1rem"
                    ></i>
                    <div>
                      <h6 class="mb-0 small">
                        In team: <strong><%= teamInfo.name %></strong>
                      </h6>
                      <small class="text-muted" style="font-size: 0.75rem">
                        <%= teamInfo.team_size %> players <% if (teamInfo.slug)
                        { %>| @<%= teamInfo.slug %><% } %>
                      </small>
                    </div>
                  </div>

                  <div class="d-grid gap-1 d-md-flex justify-content-md-center">
                    <a href="/player/team/view" class="btn btn-primary btn-sm">
                      <i class="fas fa-eye"></i> View
                    </a>
                    <a
                      href="/player/teams/browse"
                      class="btn btn-outline-info btn-sm"
                    >
                      <i class="fas fa-search"></i> Browse
                    </a>
                  </div>
                  <% } else { %>
                  <!-- Player is not in a team -->
                  <div class="alert alert-light text-center py-2 mb-2">
                    <i
                      class="fas fa-users"
                      style="font-size: 1.25rem; color: #ccc"
                    ></i>
                    <h6 class="mt-1 mb-1 small">Not in a team yet</h6>
                    <p class="text-muted mb-2" style="font-size: 0.75rem">
                      Join a team for matches & competitions!
                    </p>

                    <div
                      class="d-grid gap-1 d-md-flex justify-content-md-center"
                    >
                      <a
                        href="/player/teams/create"
                        class="btn btn-success btn-sm"
                      >
                        <i class="fas fa-plus"></i> Create
                      </a>
                      <a
                        href="/player/teams/browse"
                        class="btn btn-outline-primary btn-sm"
                      >
                        <i class="fas fa-search"></i> Browse
                      </a>
                    </div>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>

            <!-- Right Column: Stats, Queue, Activity -->
            <div class="col-lg-6 col-md-4 col-12">
              <div class="card mb-2">
                <div class="card-header bg-success text-white py-1">
                  <h6 class="mb-0">Your Stats</h6>
                </div>
                <div class="card-body py-2">
                  <div class="row">
                    <div class="col-4 mb-2">
                      <div class="card text-center">
                        <div class="card-body py-2">
                          <h6 class="card-title mb-1">Goals</h6>
                          <h4 class="mb-0"><%= stats.total_goals || 0 %></h4>
                        </div>
                      </div>
                    </div>
                    <div class="col-4 mb-2">
                      <div class="card text-center">
                        <div class="card-body py-2">
                          <h6 class="card-title mb-1">Attempts</h6>
                          <h4 class="mb-0"><%= stats.total_attempts || 0 %></h4>
                        </div>
                      </div>
                    </div>
                    <div class="col-4 mb-2">
                      <div class="card text-center">
                        <div class="card-body py-2">
                          <h6 class="card-title mb-1">Accuracy</h6>
                          <h4 class="mb-0">
                            <%= stats.total_attempts ? ((stats.total_goals /
                            stats.total_attempts) * 100).toFixed(1) : 0 %>%
                          </h4>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-6 mb-2">
                      <div class="card text-center bg-light">
                        <div class="card-body py-2">
                          <h6 class="card-title mb-1">
                            <i class="bi bi-trophy"></i> Best Streak
                          </h6>
                          <h5 class="text-warning mb-0">
                            <% if (stats.best_consecutive_kicks &&
                            stats.best_consecutive_kicks > 0) { %> <%=
                            stats.best_consecutive_kicks %> <% } else { %>
                            <span class="text-muted">N/A</span>
                            <% } %>
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div class="col-6 mb-2">
                      <div class="card text-center bg-light">
                        <div class="card-body py-2">
                          <h6 class="card-title mb-1">
                            <span class="badge bg-primary">Kicks Balance</span>
                          </h6>
                          <h5 class="mb-0"><%= player.kicks_balance || 0 %></h5>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="mt-3">
                    <p class="text-center text-muted">
                      Visit a cashier to purchase more kicks.
                    </p>
                  </div>
                </div>
              </div>

              <!-- Queue Status Card -->
              <div class="card mb-2">
                <div class="card-header bg-warning text-dark py-1">
                  <h6 class="mb-0">Queue Status</h6>
                </div>
                <div class="card-body py-2">
                  <div class="row mb-2">
                    <div class="col-md-6">
                      <div class="alert alert-info text-center py-1 mb-2">
                        <small class="d-block mb-0">Now Serving</small>
                        <h5 id="current-queue-number" class="mb-0">
                          <%= currentQueuePosition || 'None' %>
                        </h5>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="alert alert-primary text-center py-1 mb-2">
                        <small class="d-block mb-0">Your Position</small>
                        <h5 id="queue-position" class="mb-0">
                          <% if (activeTickets && activeTickets.length > 0) { %>
                          <% const nextTicket = activeTickets.find(t =>
                          t.ticket_number >= (currentQueuePosition || 0)) %> <%
                          if (nextTicket && currentQueuePosition) { %> <%=
                          nextTicket.ticket_number - currentQueuePosition %>
                          ahead <% } else { %> Your turn! <% } %> <% } else { %>
                          No tickets <% } %>
                        </h5>
                      </div>
                    </div>
                  </div>

                  <div id="tickets-section">
                    <h6 class="mb-1 small">Your Active Tickets:</h6>
                    <div id="tickets-container">
                      <% if (activeTickets && activeTickets.length > 0) { %>
                      <div class="list-group">
                        <% activeTickets.forEach(ticket => { %>
                        <div
                          class="list-group-item d-flex justify-content-between align-items-center py-1"
                          data-ticket-id="<%= ticket.id %>"
                        >
                          <div>
                            <strong>Ticket #<%= ticket.ticket_number %></strong>
                            <small class="text-muted d-block">
                              <%= ticket.competition_type === 'competition' ?
                              'Competition' : 'Practice' %> • <%= new
                              Date(ticket.created_at).toLocaleDateString() %>
                            </small>
                          </div>
                          <% if (currentQueuePosition && ticket.ticket_number <=
                          currentQueuePosition) { %>
                          <span class="badge bg-success">Ready!</span>
                          <% } else if (currentQueuePosition) { %>
                          <span class="badge bg-secondary"
                            ><%= ticket.ticket_number - currentQueuePosition %>
                            ahead</span
                          >
                          <% } else { %>
                          <span class="badge bg-info">In Queue</span>
                          <% } %>
                        </div>
                        <% }) %>
                      </div>
                      <% } else { %>
                      <div class="alert alert-light text-center py-2">
                        <i
                          class="bi bi-ticket-perforated"
                          style="font-size: 1.25rem; color: #ccc"
                        ></i>
                        <p class="mt-1 mb-0 small">No active queue tickets</p>
                        <small class="text-muted"
                          >Visit a cashier to join the queue</small
                        >
                      </div>
                      <% } %>
                    </div>
                  </div>

                  <div class="mt-1">
                    <small class="text-muted" style="font-size: 0.75rem">
                      <i class="bi bi-info-circle"></i>
                      Auto-updates every 10s
                    </small>
                  </div>
                </div>
              </div>

              <div class="card mb-2">
                <div class="card-header bg-warning text-dark py-1">
                  <h6 class="mb-0">Recent Activity</h6>
                </div>
                <div class="card-body py-2">
                  <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                      <thead>
                        <tr>
                          <th class="small">Date</th>
                          <th class="small">Goals</th>
                          <th class="small">Location</th>
                          <th class="small">Referee</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if (typeof recentActivity !== 'undefined' &&
                        recentActivity && recentActivity.length > 0) { %> <%
                        recentActivity.forEach(activity => { %>
                        <tr>
                          <td class="small">
                            <%= new
                            Date(activity.timestamp).toLocaleDateString() %>
                          </td>
                          <td class="small"><%= activity.goals %></td>
                          <td class="small"><%= activity.location %></td>
                          <td class="small">
                            <%= activity.staff_name || 'Unknown' %>
                          </td>
                        </tr>
                        <% }); %> <% } else { %>
                        <tr>
                          <td colspan="4" class="text-center small">
                            No recent activity
                          </td>
                        </tr>
                        <% } %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bottom reference markers to ensure all sections are visible -->
<div class="container-fluid mt-2">
  <div class="row">
    <div class="col-12">
      <div class="card-footer bg-light text-center py-1">
        <small class="text-muted"
          >Dashboard sections: Player Info | QR Code | Notifications | Teams |
          Stats | Queue | Activity</small
        >
      </div>
    </div>
  </div>
</div>

<style>
  /* COMPLETELY REDONE DASHBOARD CSS */

  /* Make child account badge icon smaller */
  .badge .bi-person-hearts {
    font-size: 0.875rem !important;
  }

  /* Basic layout fixes */
  .container-fluid {
    max-width: 1600px;
  }

  /* Card styling */
  .card {
    margin-bottom: 0.5rem !important;
    border-radius: 0.375rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  /* Fix card headers */
  .card-header {
    padding: 0.5rem 0.75rem !important;
  }

  /* Fix card bodies */
  .card-body {
    padding: 0.625rem !important;
  }

  /* Profile section */
  #player-avatar-container img,
  #player-avatar-container canvas {
    width: 70px !important;
    height: 70px !important;
  }

  /* QR Code size */
  .card img.img-fluid {
    max-width: 100px;
    margin: 0 auto;
  }

  /* Better spacing */
  .row.g-2 > * {
    padding-left: 0.25rem;
    padding-right: 0.25rem;
  }

  /* Table fixes */
  .table-sm td,
  .table-sm th {
    padding: 0.25rem;
    font-size: 0.85rem;
  }

  /* Better alert styling */
  .alert {
    padding: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  /* Stats cards */
  .card .card-body h4 {
    font-size: 1.25rem;
    margin-bottom: 0;
  }

  .card .card-body h5 {
    font-size: 1.1rem;
    margin-bottom: 0;
  }

  .card .card-body h6 {
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
  }

  /* Ensure buttons are not too large */
  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
  }

  /* Make sure all sections are visible */
  .col-lg-3 {
    min-width: 200px;
  }

  /* Force all sections to be visible */
  .card {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  /* Animation for notifications */
  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }
</style>

<script src="/js/avatar.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Auto-refresh queue status every 10 seconds
    function updateQueueStatus() {
      fetch("/player/api/queue-status")
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // Update current queue number
            document.getElementById("current-queue-number").textContent =
              data.currentQueuePosition || "None";

            // Update player position and ticket statuses
            if (data.playerTickets && data.playerTickets.length > 0) {
              let nextTicket = data.playerTickets.find(
                (t) => t.ticket_number >= (data.currentQueuePosition || 0)
              );
              let positionText = "Your turn!";
              let isReady = false;

              if (nextTicket && data.currentQueuePosition) {
                const ahead =
                  nextTicket.ticket_number - data.currentQueuePosition;
                if (ahead > 0) {
                  positionText = `${ahead} ahead`;
                } else {
                  isReady = true;
                }
              }

              const positionElement = document.getElementById("queue-position");
              positionElement.textContent = positionText;

              // Add visual indicator if ready
              if (isReady) {
                positionElement.parentElement.className =
                  "alert alert-success text-center";
              } else {
                positionElement.parentElement.className =
                  "alert alert-primary text-center";
              }

              // Update tickets container with fresh data
              updateTicketsContainer(
                data.playerTickets,
                data.currentQueuePosition
              );
            } else {
              document.getElementById("queue-position").textContent =
                "No tickets";

              // Show no tickets message
              const ticketsContainer =
                document.getElementById("tickets-container");
              ticketsContainer.innerHTML = `
                <div class="alert alert-light text-center">
                  <i class="bi bi-ticket-perforated" style="font-size: 2rem; color: #ccc;"></i>
                  <p class="mt-2 mb-0">No active queue tickets</p>
                  <small class="text-muted">Visit a cashier to purchase kicks and join the queue</small>
                </div>
              `;
            }
          }
        })
        .catch((error) => console.error("Error updating queue status:", error));
    }

    // Function to update the tickets container
    function updateTicketsContainer(tickets, currentQueuePosition) {
      const ticketsContainer = document.getElementById("tickets-container");

      if (tickets && tickets.length > 0) {
        let ticketsHtml = '<div class="list-group">';

        tickets.forEach((ticket) => {
          let badgeClass = "badge bg-info";
          let badgeText = "In Queue";

          if (
            currentQueuePosition &&
            ticket.ticket_number <= currentQueuePosition
          ) {
            badgeClass = "badge bg-success";
            badgeText = "Ready!";
          } else if (currentQueuePosition) {
            const ahead = ticket.ticket_number - currentQueuePosition;
            badgeClass = "badge bg-secondary";
            badgeText = `${ahead} ahead`;
          }

          const createdDate = new Date(ticket.created_at).toLocaleString();
          const competitionType =
            ticket.competition_type === "competition"
              ? "Competition"
              : "Practice";

          ticketsHtml += `
            <div class="list-group-item d-flex justify-content-between align-items-center" data-ticket-id="${ticket.id}">
              <div>
                <strong>Ticket #${ticket.ticket_number}</strong>
                <br>
                <small class="text-muted">
                  ${competitionType} • ${createdDate}
                </small>
              </div>
              <span class="${badgeClass}">${badgeText}</span>
            </div>
          `;
        });

        ticketsHtml += "</div>";
        ticketsContainer.innerHTML = ticketsHtml;
      } else {
        ticketsContainer.innerHTML = `
          <div class="alert alert-light text-center">
            <i class="bi bi-ticket-perforated" style="font-size: 2rem; color: #ccc;"></i>
            <p class="mt-2 mb-0">No active queue tickets</p>
            <small class="text-muted">Visit a cashier to purchase kicks and join the queue</small>
          </div>
        `;
      }
    }

    // Update queue status immediately and then every 10 seconds
    updateQueueStatus();
    setInterval(updateQueueStatus, 10000);

    // Fetch and display player notifications
    function loadNotifications() {
      const notificationsContainer = document.getElementById(
        "notifications-container"
      );
      const unreadCountBadge = document.getElementById("unread-count");
      const clearAllBtn = document.getElementById(
        "clear-all-notifications-btn"
      );

      fetch("/player/notifications")
        .then((response) => response.json())
        .then((data) => {
          if (data.success && data.notifications) {
            if (data.notifications.length === 0) {
              notificationsContainer.innerHTML = `
                <div class="text-center py-4">
                  <i class="bi bi-bell-slash" style="font-size: 2rem; color: #ccc;"></i>
                  <p class="mt-2 mb-0">No notifications</p>
                </div>
              `;
              unreadCountBadge.style.display = "none";
              clearAllBtn.style.display = "none";
              return;
            }

            // Show clear all button when there are notifications
            clearAllBtn.style.display = "inline-block";

            // Count unread notifications
            const unreadCount = data.notifications.filter(
              (n) => !n.is_read
            ).length;
            if (unreadCount > 0) {
              unreadCountBadge.textContent = unreadCount;
              unreadCountBadge.style.display = "inline-block";
            } else {
              unreadCountBadge.style.display = "none";
            }

            // Display notifications
            let html = '<div class="list-group">';
            data.notifications.forEach((notification) => {
              const readClass = notification.is_read ? "" : "fw-bold bg-light";
              const dateFormatted = new Date(
                notification.created_at
              ).toLocaleString();

              // Determine icon based on notification type
              let icon = "bi-bell";
              if (notification.type === "raffle_win") {
                icon = "bi-trophy";
              }

              html += `
                <div class="list-group-item ${readClass}" data-notification-id="${
                notification.id
              }">
                  <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">
                      <i class="bi ${icon} me-2"></i>
                      ${notification.title}
                    </h6>
                    <small class="text-muted">${dateFormatted}</small>
                  </div>
                  <p class="mb-1">${notification.message}</p>
                  ${
                    !notification.is_read
                      ? `<button class="btn btn-sm btn-outline-secondary mark-read-btn mt-2" data-id="${notification.id}">Mark as read</button>`
                      : ""
                  }
                </div>
              `;
            });
            html += "</div>";
            notificationsContainer.innerHTML = html;

            // Add event listeners to "Mark as read" buttons
            document.querySelectorAll(".mark-read-btn").forEach((btn) => {
              btn.addEventListener("click", function () {
                const id = this.dataset.id;
                fetch(`/player/notifications/${id}/read`, { method: "POST" })
                  .then((response) => response.json())
                  .then((data) => {
                    if (data.success) {
                      loadNotifications(); // Reload to update UI
                    }
                  });
              });
            });
          } else {
            notificationsContainer.innerHTML = `
              <div class="alert alert-info">
                <i class="bi bi-bell-slash me-2"></i> You have no notifications
              </div>
            `;
          }
        })
        .catch((error) => {
          console.error("Error loading notifications:", error);
          notificationsContainer.innerHTML = `
            <div class="alert alert-danger">
              Error loading notifications
            </div>
          `;
        });
    }

    // Load notifications on page load
    loadNotifications();

    // Add event listener for clear all notifications button
    document
      .getElementById("clear-all-notifications-btn")
      .addEventListener("click", function () {
        if (
          confirm(
            "Are you sure you want to clear all notifications? This action cannot be undone."
          )
        ) {
          const button = this;
          const originalText = button.innerHTML;

          // Show loading state
          button.innerHTML = '<i class="bi bi-spinner"></i> Clearing...';
          button.disabled = true;

          fetch("/player/notifications/clear", {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                // Show success message briefly
                button.innerHTML = '<i class="bi bi-check"></i> Cleared!';

                // Reload notifications to update UI
                setTimeout(() => {
                  loadNotifications();
                  button.innerHTML = originalText;
                  button.disabled = false;
                }, 1000);
              } else {
                throw new Error(
                  data.message || "Failed to clear notifications"
                );
              }
            })
            .catch((error) => {
              console.error("Error clearing notifications:", error);
              alert("Failed to clear notifications. Please try again.");

              // Restore button state
              button.innerHTML = originalText;
              button.disabled = false;
            });
        }
      });

    // Refresh notifications every 60 seconds
    setInterval(loadNotifications, 60000);

    // Show notification when player is ready
    function showReadyNotification() {
      // Create a simple notification
      if ("Notification" in window && Notification.permission === "granted") {
        new Notification("Striker Splash - Your Turn!", {
          body: "It's your turn! Head to the dunk tank.",
          icon: "/images/favicon.ico",
        });
      }

      // Visual notification - pulse effect
      const queueCard = document
        .querySelector('.card-header:contains("Queue Status")')
        .closest(".card");
      if (queueCard) {
        queueCard.style.animation = "pulse 1s ease-in-out 3";
      }
    }

    // Request notification permission
    if ("Notification" in window && Notification.permission === "default") {
      Notification.requestPermission();
    }
  });
</script>

<style>
  /* Ensure dashboard sections are visible and properly spaced */
  .container-fluid {
    max-width: none !important;
    padding-left: 15px;
    padding-right: 15px;
  }

  @media (min-width: 768px) {
    .container-fluid {
      padding-left: 30px;
      padding-right: 30px;
    }
  }

  /* Ensure cards are visible */
  .card {
    margin-bottom: 1.5rem !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Make sure columns don't collapse */
  .col-lg-4.col-md-5.col-12,
  .col-lg-8.col-md-7.col-12 {
    margin-bottom: 2rem;
  }

  /* Ensure QR code is visible */
  #player-avatar-container {
    min-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Ensure notifications container is visible */
  #notifications-container {
    min-height: 100px;
  }

  /* Make sure team section is visible */
  .alert {
    margin-bottom: 1rem !important;
  }
</style>
