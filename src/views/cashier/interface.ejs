<div class="container mt-5">
  <div class="row">
    <div class="col-md-10 offset-md-1">
      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">Cashier Interface</h3>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <!-- QR Scanner -->
              <div class="scan-container">
                <h4>Scan Player QR Code</h4>
                <p>Scan a player's QR code to sell kicks.</p>
                
                <div id="qr-reader-container" class="mb-3" style="width: 100%; height: 300px; border: 1px solid #ddd; position: relative;">
                  <!-- Scanner will be inserted here -->
                </div>
                
                <div class="d-grid gap-2">
                  <button id="start-scan" class="btn btn-primary">Start Scanner</button>
                  <div id="scanner-controls" class="d-none">
                    <button id="stop-scan" class="btn btn-danger">Stop Scanner</button>
                  </div>
                </div>
              </div>
              
              <!-- Player Search -->
              <div class="mt-4">
                <h5>Search Player by Name</h5>
                <div class="input-group mb-3">
                  <input type="text" id="name-search" class="form-control" placeholder="Enter player name">
                  <button class="btn btn-outline-secondary" type="button" id="search-button">Search</button>
                </div>
                <div id="search-results" class="list-group mt-2"></div>
              </div>
            </div>
            
            <div class="col-md-6">
              <!-- Player Info and Actions -->
              <div id="player-info" class="player-info">
                <!-- Content will be populated by JavaScript when QR is scanned -->
                <div class="text-center">
                  <p>Scan a player's QR code or search to get started</p>
                  <i class="bi bi-person-circle" style="font-size: 5rem; color: #ccc;"></i>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Queue Status -->
      <div class="card mb-4">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">Queue Status</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="alert alert-info">
                <h5>Now Serving</h5>
                <h2 id="current-queue-number">Loading...</h2>
              </div>
            </div>
            <div class="col-md-6">
              <div class="alert alert-warning">
                <h5>Next Ticket</h5>
                <h2 id="next-ticket-number"><%= typeof nextTicket !== 'undefined' ? nextTicket : 'Loading...' %></h2>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Transactions -->
      <div class="card">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">Today's Transactions</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Time</th>
                  <th>Player</th>
                  <th>Kicks</th>
                  <th>Amount</th>
                  <th>Ticket #</th>
                </tr>
              </thead>
              <tbody id="transactions-table">
                <!-- This will be populated dynamically -->
                <tr id="no-transactions-row">
                  <td colspan="5" class="text-center">No transactions recorded today</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Sell Kicks Modal -->
<div class="modal fade" id="sellKicksModal" tabindex="-1" aria-labelledby="sellKicksModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="sellKicksModalLabel">Sell Kicks</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="sell-kicks-form">
          <input type="hidden" id="player-id" name="playerId">
          
          <div class="mb-3">
            <label for="player-name" class="form-label">Player Name</label>
            <input type="text" class="form-control" id="player-name" readonly>
          </div>
          
          <div class="mb-3">
            <label for="kicks" class="form-label">Number of Kicks</label>
            <input type="number" class="form-control" id="kicks" name="kicks" value="5" min="1" required>
            <div class="form-text">Minimum 5 kicks required for competition entry.</div>
          </div>
          
          <div class="mb-3">
            <label for="amount" class="form-label">Amount (BZD)</label>
            <div class="input-group">
              <span class="input-group-text">$</span>
              <input type="number" class="form-control" id="amount" name="amount" value="5" min="1" step="0.01" required>
            </div>
            <div class="form-text">$1 per kick.</div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="add-to-queue" name="addToQueue" checked>
              <label class="form-check-label" for="add-to-queue">
                Add to Queue
              </label>
            </div>
            <div class="form-text">Player will receive a queue ticket.</div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="official-entry" name="officialEntry" checked>
              <label class="form-check-label" for="official-entry">
                Official Competition Entry
              </label>
            </div>
            <div class="form-text">Results will be recorded on the leaderboard.</div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="team-play" name="teamPlay">
              <label class="form-check-label" for="team-play">
                Team Play
              </label>
            </div>
            <div class="form-text">Check this if the player is playing as part of their team.</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="submit-sale">Complete Sale</button>
      </div>
    </div>
  </div>
</div>

<!-- Include HTML5-QRCode library -->
<script src="https://unpkg.com/html5-qrcode@2.0.9/dist/html5-qrcode.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // QR Code Scanner
    let html5QrCode = null;
    const qrContainer = document.getElementById('qr-reader-container');
    let currentPlayerId = null;
    
    // Start scanning button
    document.getElementById('start-scan').addEventListener('click', function() {
      // Clean up any existing scanner
      if (html5QrCode) {
        try {
          html5QrCode.stop();
          html5QrCode.clear();
        } catch (e) {
          console.error("Error stopping scanner:", e);
        }
        html5QrCode = null;
      }
      
      // Clear the container
      qrContainer.innerHTML = '';
      
      // Create a new scanner div
      const scannerDiv = document.createElement('div');
      scannerDiv.id = 'qr-scanner';
      scannerDiv.style.width = '100%';
      scannerDiv.style.height = '100%';
      qrContainer.appendChild(scannerDiv);
      
      // Create new scanner instance
      html5QrCode = new Html5Qrcode("qr-scanner");
      
      // Start scanning
      html5QrCode.start(
        { facingMode: "environment" },
        { fps: 10, qrbox: 250 },
        onScanSuccess,
        onScanError
      )
      .then(() => {
        document.getElementById('scanner-controls').classList.remove('d-none');
        this.classList.add('d-none');
      })
      .catch(err => {
        console.error('Failed to start scanner:', err);
        alert('Failed to start camera. Please check camera permissions.');
      });
    });
    
    // Stop scanning button
    document.getElementById('stop-scan').addEventListener('click', function() {
      stopScanner();
    });
    
    // QR scan success handler
    function onScanSuccess(qrCodeMessage) {
      // Stop scanning
      stopScanner();
      
      // Process QR code data
      try {
        const qrData = JSON.parse(qrCodeMessage);
        if (qrData.playerId) {
          fetchPlayerById(qrData.playerId);
        }
      } catch (e) {
        console.error('Invalid QR code data:', e);
        alert('Invalid QR code');
      }
    }
    
    // QR scan error handler
    function onScanError(error) {
      console.warn(`QR scan error: ${error}`);
    }
    
    // Helper function to stop scanner
    function stopScanner() {
      if (html5QrCode) {
        html5QrCode.stop()
          .then(() => {
            html5QrCode.clear();
            html5QrCode = null;
            qrContainer.innerHTML = '';
            document.getElementById('scanner-controls').classList.add('d-none');
            document.getElementById('start-scan').classList.remove('d-none');
          })
          .catch(err => {
            console.error('Failed to stop scanner:', err);
          });
      }
    }
    
    // Fetch player by ID
    function fetchPlayerById(playerId) {
      // Show loading indicator
      document.getElementById('player-info').innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
      
      // Fetch player data
      fetch(`/api/players/search?id=${playerId}`)
        .then(response => response.json())
        .then(data => {
          if (data && data.length > 0) {
            displayPlayerInfo(data[0], [], 0);
          } else {
            document.getElementById('player-info').innerHTML = `
              <div class="alert alert-danger">Player not found</div>
            `;
          }
        })
        .catch(error => {
          console.error('Error fetching player:', error);
          document.getElementById('player-info').innerHTML = `
            <div class="alert alert-danger">Error fetching player data</div>
          `;
        });
    }
    
    // Fix search functionality
    document.getElementById('search-button').addEventListener('click', function() {
      const name = document.getElementById('name-search').value.trim();
      
      if (!name) {
        alert('Please enter a name');
        return;
      }
      
      // Show loading indicator
      document.getElementById('search-results').innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm text-primary" role="status"></div></div>';
      
      // Direct database query for player search
      fetch(`/api/players/search?name=${encodeURIComponent(name)}`)
        .then(response => response.json())
        .then(data => {
          const resultsContainer = document.getElementById('search-results');
          resultsContainer.innerHTML = '';
          
          if (data && data.length > 0) {
            data.forEach(player => {
              const item = document.createElement('button');
              item.className = 'list-group-item list-group-item-action';
              item.innerHTML = `
                <h5 class="mb-1">${player.name}</h5>
                <p class="mb-1">${player.phone}</p>
              `;
              
              item.addEventListener('click', function() {
                displayPlayerInfo(player, [], 0);
              });
              
              resultsContainer.appendChild(item);
            });
          } else {
            resultsContainer.innerHTML = '<div class="alert alert-danger">No player found</div>';
          }
        })
        .catch(error => {
          console.error('Error searching player:', error);
          document.getElementById('search-results').innerHTML = '<div class="alert alert-danger">Error searching</div>';
        });
    });
    
    // Display player info
    function displayPlayerInfo(player, activeTickets = [], todayKicks = 0) {
      currentPlayerId = player.id;
      
      // Update player info
      const playerInfo = document.getElementById('player-info');
      playerInfo.innerHTML = `
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center mb-3">
              <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center me-3" style="width: 60px; height: 60px;">
                <i class="bi bi-person-fill" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h4 class="mb-0">${player.name}</h4>
                <p class="text-muted mb-0">${player.phone}</p>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-6">
                <p><strong>Age Group:</strong> ${player.age_group}</p>
              </div>
              <div class="col-6">
                <p><strong>District:</strong> ${player.residence}</p>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-12">
                <div class="alert alert-primary mb-0">
                  <h5 class="mb-0">Kicks Balance: <strong>${player.kicks_balance || 0}</strong></h5>
                </div>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="button" class="btn btn-primary" id="sell-kicks-btn">Sell Kicks</button>
            </div>
          </div>
        </div>
      `;
      
      // Add event listener for sell kicks button
      document.getElementById('sell-kicks-btn').addEventListener('click', function() {
        // Show sell kicks modal
        const sellKicksModal = new bootstrap.Modal(document.getElementById('sellKicksModal'));
        
        // Set player info
        document.getElementById('player-id').value = currentPlayerId;
        document.getElementById('player-name').value = player.name;
        
        // Set default values
        document.getElementById('kicks').value = 5;
        document.getElementById('amount').value = 5;
        document.getElementById('add-to-queue').checked = true;
        document.getElementById('official-entry').checked = true;
        document.getElementById('team-play').checked = false;
        
        // Show modal
        sellKicksModal.show();
      });
      
      // Sync kicks and amount
      document.getElementById('kicks').addEventListener('input', function() {
        document.getElementById('amount').value = this.value;
      });
      
      document.getElementById('amount').addEventListener('input', function() {
        document.getElementById('kicks').value = this.value;
      });
    }
    
    // Submit sale
    document.getElementById('submit-sale').addEventListener('click', function() {
      const playerId = document.getElementById('player-id').value;
      const kicks = document.getElementById('kicks').value;
      const amount = document.getElementById('amount').value;
      const addToQueue = document.getElementById('add-to-queue').checked;
      const officialEntry = document.getElementById('official-entry').checked;
      const teamPlay = document.getElementById('team-play').checked;
      
      if (!kicks || kicks < 1) {
        alert('Please enter a valid number of kicks');
        return;
      }
      
      if (!amount || amount < 1) {
        alert('Please enter a valid amount');
        return;
      }
      
      // Show loading indicator
      this.disabled = true;
      this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
      
      // Send sale data to server
      fetch('/cashier/sell-kicks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          playerId: parseInt(playerId), 
          kicks: parseInt(kicks), 
          amount: parseFloat(amount), 
          addToQueue, 
          officialEntry,
          teamPlay
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Close modal
          bootstrap.Modal.getInstance(document.getElementById('sellKicksModal')).hide();
          
          // Show success message
          alert(`Successfully sold ${kicks} kicks for $${amount}!${data.ticketNumber ? ` Queue ticket #${data.ticketNumber} issued.` : ''}`);
          
          // Update transactions table
          updateTransactionsTable({
            timestamp: new Date(),
            playerName: document.getElementById('player-name').value,
            kicks: kicks,
            amount: amount,
            ticketNumber: data.ticketNumber || '-'
          });
          
          // Update next ticket number
          if (data.nextTicket) {
            document.getElementById('next-ticket-number').textContent = data.nextTicket;
          }
          
          // Reset player info
          document.getElementById('player-info').innerHTML = `
            <div class="text-center">
              <p>Scan a player's QR code or search to get started</p>
              <i class="bi bi-person-circle" style="font-size: 5rem; color: #ccc;"></i>
            </div>
          `;
          currentPlayerId = null;
        } else {
          // Show error message
          alert(`Error: ${data.message}`);
        }
        
        // Reset button
        this.disabled = false;
        this.innerHTML = 'Complete Sale';
      })
      .catch(error => {
        console.error('Error processing sale:', error);
        alert('Error processing sale. Please try again.');
        this.disabled = false;
        this.innerHTML = 'Complete Sale';
      });
    });
    
    // Fix Now Serving display
    function updateQueuePosition() {
      fetch('/api/queue/current')
        .then(response => response.json())
        .then(data => {
          document.getElementById('current-queue-number').textContent = 
            data.currentQueuePosition || 'No active tickets';
        })
        .catch(error => {
          console.error('Error updating queue:', error);
          document.getElementById('current-queue-number').textContent = 'Error';
        });
    }
    
    // Update queue every 5 seconds
    updateQueuePosition();
    setInterval(updateQueuePosition, 5000);
    
    // Load today's transactions
    function loadTodaysTransactions() {
      fetch('/api/transactions/today')
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            updateTransactionsTableWithData(data);
          }
        })
        .catch(error => {
          console.error('Error loading today\'s transactions:', error);
        });
    }
    
    // Try to load transactions
    try {
      loadTodaysTransactions();
    } catch (e) {
      console.error('Error loading transactions:', e);
    }
    
    // Update transactions table with local data
    function updateTransactionsTable(transaction) {
      const table = document.getElementById('transactions-table');
      const noTransactionsRow = document.getElementById('no-transactions-row');
      
      if (noTransactionsRow) {
        noTransactionsRow.remove();
      }
      
      const newRow = table.insertRow(0);
      
      const timeCell = newRow.insertCell(0);
      const playerCell = newRow.insertCell(1);
      const kicksCell = newRow.insertCell(2);
      const amountCell = newRow.insertCell(3);
      const ticketCell = newRow.insertCell(4);
      
      timeCell.textContent = transaction.timestamp.toLocaleTimeString();
      playerCell.textContent = transaction.playerName;
      kicksCell.textContent = transaction.kicks;
      amountCell.textContent = `$${transaction.amount}`;
      ticketCell.textContent = transaction.ticketNumber;
    }
    
    // Update transactions table with data from API
    function updateTransactionsTableWithData(transactions) {
      const table = document.getElementById('transactions-table');
      const noTransactionsRow = document.getElementById('no-transactions-row');
      
      if (noTransactionsRow) {
        noTransactionsRow.remove();
      }
      
      transactions.forEach(transaction => {
        const newRow = table.insertRow(-1);
        
        const timeCell = newRow.insertCell(0);
        const playerCell = newRow.insertCell(1);
        const kicksCell = newRow.insertCell(2);
        const amountCell = newRow.insertCell(3);
        const ticketCell = newRow.insertCell(4);
        
        const timestamp = new Date(transaction.timestamp);
        timeCell.textContent = timestamp.toLocaleTimeString();
        playerCell.textContent = transaction.playerName;
        kicksCell.textContent = transaction.kicks;
        amountCell.textContent = `$${transaction.amount}`;
        ticketCell.textContent = transaction.ticketNumber || '-';
      });
    }
  });
</script>