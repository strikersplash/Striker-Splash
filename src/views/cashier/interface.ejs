<div class="container-fluid mt-3">
  <!-- Initialization script to store server-side preloaded transactions -->
  <script>
    // Immediately execute this script to store preloaded transactions
    (function() {
      // Get user info for consistent storage key
      const userRole = "<%= user.role %>";
      const userId = "<%= user.id %>";

      // Use the same storage key pattern as the main script
      const STORAGE_KEY = `cashierTransactions_${userRole}_${userId}`;

      // For sales users, initialize with preloaded transactions
      <% if (user.role === 'sales' && typeof preloadedTransactions !== 'undefined' && preloadedTransactions.length > 0) { %>
        try {
          const preloadedData = <%- JSON.stringify(preloadedTransactions) %>;
          // Process transactions to ensure proper data types
          const processedData = preloadedData.map(transaction => ({
            ...transaction,
            amount: parseFloat(transaction.amount || 0),
            kicks_count: parseInt(transaction.kicks_count || 0, 10),
            ticket_number: parseInt(transaction.ticket_number || 0, 10)
          }));

          // Store in multiple locations for better persistence
          localStorage.setItem(STORAGE_KEY, JSON.stringify(processedData));
          sessionStorage.setItem(STORAGE_KEY, JSON.stringify(processedData));

          // Set up a global window variable that other scripts can access immediately
          window.cachedTransactions = processedData;
          window.preloadedFromServer = true;
          window.pageLoadTime = Date.now();

          } catch (e) {
          console.error('Error storing preloaded transactions:', e);
        }
      <% } else { %>
        // For sales users with no preloaded transactions, check storage instead of overwriting
        // Don't overwrite window.cachedTransactions, instead check if there's stored data
        let existingTransactions = [];
        try {
          // Try sessionStorage first (most recent)
          const sessionData = sessionStorage.getItem(STORAGE_KEY);
          if (sessionData) {
            existingTransactions = JSON.parse(sessionData);
            }
          // Try localStorage as backup
          else {
            const localData = localStorage.getItem(STORAGE_KEY);
            if (localData) {
              existingTransactions = JSON.parse(localData);
              console.log(`Found ${existingTransactions.length} transactions in localStorage`);
            }
          }
        } catch (e) {
          console.error('Error reading stored transactions:', e);
        }

        // Set up window cache with existing data or empty array
        window.cachedTransactions = existingTransactions;
        window.preloadedFromServer = false;
        window.pageLoadTime = Date.now();

        console.log(`Initialized with ${existingTransactions.length} existing transactions`);
      <% } %>
    })();
  </script>

  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">Cashier Interface</h4>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-lg-6 mb-4">
              <!-- QR Scanner -->
              <div class="scan-container">
                <h5>Scan Player QR Code</h5>
                <p class="small">Scan a player's QR code to sell kicks.</p>
                <div
                  id="qr-reader"
                  style="
                    width: 100%;
                    height: 250px;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                  "
                ></div>
                <div class="d-grid gap-2 mt-2">
                  <button id="start-scan" class="btn btn-primary">
                    Start Scanner
                  </button>
                  <button id="stop-scan" class="btn btn-danger d-none">
                    <i class="bi bi-stop-circle"></i> Stop Scanner
                  </button>
                </div>
              </div>

              <!-- Mobile-friendly responsive height adjustment -->
              <style>
                @media (max-width: 767px) {
                  #qr-reader {
                    height: 200px !important;
                  }
                }

                /* Make child account badge icon smaller */
                .badge .bi-person-hearts {
                  font-size: 0.875rem !important;
                }
              </style>
              <!-- Player Search -->
              <div class="mt-4">
                <h5>Search Player by Name</h5>
                <div class="input-group mb-3">
                  <input
                    type="text"
                    id="name-search"
                    class="form-control"
                    placeholder="Enter player name"
                  />
                  <button
                    class="btn btn-outline-secondary"
                    type="button"
                    id="search-button"
                  >
                    Search
                  </button>
                </div>
                <div id="search-results" class="list-group mt-2"></div>
              </div>
            </div>
            <div class="col-md-6">
              <!-- Player Info and Actions -->
              <div id="player-info" class="player-info">
                <div class="text-center">
                  <p>Scan a player's QR code or search to get started</p>
                  <i
                    class="bi bi-person-circle"
                    style="font-size: 5rem; color: #ccc"
                  ></i>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <% if (user.role !== 'sales') { %>
      <!-- Queue Status -->
      <div class="card mb-4">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">Queue Status</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="alert alert-info">
                <h5>Now Serving</h5>
                <h2 id="current-queue-number">Loading...</h2>
              </div>
            </div>
            <div class="col-md-6">
              <div class="alert alert-warning">
                <h5>Next Ticket</h5>
                <h2 id="next-ticket-number">
                  <%= typeof nextTicket !== 'undefined' ? nextTicket :
                  'Loading...' %>
                </h2>
              </div>
            </div>
          </div>
        </div>
      </div>
      <% } %>

      <!-- Recent Transactions -->
      <div class="card">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">Today's Transactions</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Time</th>
                  <th>Player</th>
                  <th>Type</th>
                  <th>Kicks</th>
                  <th>Amount</th>
                  <th>Staff</th>
                  <% if (user.role !== 'sales') { %>
                  <th>Ticket #</th>
                  <% } %>
                </tr>
              </thead>
              <tbody id="transactions-table">
                <% if (user.role === 'sales' && typeof preloadedTransactions !==
                'undefined' && preloadedTransactions.length > 0) { %> <%
                preloadedTransactions.forEach(function(transaction) { %>
                <tr>
                  <td>
                    <%= new Date(transaction.timestamp).toLocaleTimeString() %>
                  </td>
                  <td><%= transaction.player_name || 'Unknown' %></td>
                  <td>
                    <span
                      class="badge <%= transaction.transaction_type === 'sale' ? 'bg-success' : 'bg-warning text-dark' %>"
                      ><%= transaction.transaction_type === 'sale' ? 'Sale' :
                      'Requeue' %></span
                    >
                  </td>
                  <td><%= transaction.kicks_count || 0 %></td>
                  <td>
                    $<%= parseFloat(transaction.amount || 0).toFixed(2) %> BZD
                  </td>
                  <td><%= transaction.staff_name || user.name %></td>
                </tr>
                <% }); %> <% } else { %>
                <tr id="no-transactions-row">
                  <td
                    colspan="<%= user.role === 'sales' ? '6' : '7' %>"
                    class="text-center"
                  >
                    No transactions recorded today
                  </td>
                </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Sell Kicks Modal -->
<div
  class="modal fade"
  id="sellKicksModal"
  tabindex="-1"
  aria-labelledby="sellKicksModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="sellKicksModalLabel">Sell Kicks</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="sellKicksForm">
          <input type="hidden" id="sell-player-id" name="playerId" />
          <div class="mb-3">
            <label for="sell-player-name" class="form-label">Player</label>
            <input
              type="text"
              class="form-control"
              id="sell-player-name"
              readonly
            />
          </div>
          <div class="mb-3">
            <label for="kicks-quantity" class="form-label"
              >Number of Kicks</label
            >
            <div class="input-group">
              <input
                type="number"
                class="form-control"
                id="kicks-quantity"
                name="kicksQuantity"
                min="1"
                max="50"
                value="5"
                required
              />
              <span class="input-group-text">kicks</span>
            </div>
            <div class="form-text">
              <strong
                >Total Cost: $<span id="total-cost">5.00</span> BZD</strong
              >
              ($1 per kick)
            </div>
          </div>
          <% if (user.role === 'sales') { %>
          <!-- Sales users: Only Add to Balance option -->
          <input
            type="hidden"
            id="purchase-type"
            name="purchaseType"
            value="balance"
          />
          <div class="mb-3">
            <div class="alert alert-success">
              <strong>Purchase Type:</strong> Add to Balance Only <br /><small
                >Kicks will be added to the player's account for later
                use.</small
              >
            </div>
          </div>
          <% } else { %>
          <!-- Staff/Admin users: Full purchase type options -->
          <div class="mb-3">
            <label for="purchase-type" class="form-label">Purchase Type</label>
            <select
              class="form-select"
              id="purchase-type"
              name="purchaseType"
              required
            >
              <option value="balance" selected>Add to Balance Only</option>
              <option value="balance-and-kick-no-competition">
                Add to Balance + Kick (No Competition)
              </option>
              <option value="balance-and-kick-for-competition">
                Add to Balance + Kick for Competition
              </option>
            </select>
            <div class="form-text" id="purchase-type-help">
              Balance only: Kicks are added to player's account for later use
            </div>
          </div>
          <div class="alert alert-info">
            <strong>Note:</strong> Player can use maximum 5 kicks per turn.
            Remaining kicks stay in their balance.
          </div>
          <% } %>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-success" id="confirm-sell-kicks">
          Process Sale
        </button>
      </div>
    </div>
  </div>
</div>

<% if (user.role !== 'sales') { %>
<!-- Requeue Player Modal -->
<div
  class="modal fade"
  id="requeueModal"
  tabindex="-1"
  aria-labelledby="requeueModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="requeueModalLabel">Requeue Player</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="requeueForm">
          <input type="hidden" id="requeue-player-id" name="playerId" />
          <div class="mb-3">
            <label for="requeue-player-name" class="form-label">Player</label>
            <input
              type="text"
              class="form-control"
              id="requeue-player-name"
              readonly
            />
          </div>
          <div class="mb-3">
            <label for="requeue-kicks-balance" class="form-label"
              >Current Kicks Balance</label
            >
            <input
              type="text"
              class="form-control"
              id="requeue-kicks-balance"
              readonly
            />
          </div>
          <div class="mb-3">
            <label for="requeue-kicks-amount" class="form-label"
              >Number of Kicks to Use</label
            >
            <div class="input-group">
              <input
                type="number"
                class="form-control"
                id="requeue-kicks-amount"
                name="kicksAmount"
                min="1"
                max="5"
                value="5"
                required
              />
              <span class="input-group-text">kicks</span>
            </div>
            <div class="form-text">
              Maximum 5 kicks can be used per queue entry
            </div>
          </div>
          <div class="mb-3">
            <label for="requeue-type" class="form-label">Kick Type</label>
            <select
              class="form-select"
              id="requeue-type"
              name="requeueType"
              required
            >
              <option value="kick-no-competition" selected>
                Kick (No Competition)
              </option>
              <option value="kick-for-competition">Kick for Competition</option>
            </select>
            <div class="form-text" id="requeue-type-help">
              Non-competition kicks are for practice, competition kicks count
              toward standings
            </div>
          </div>
          <div
            class="alert alert-warning"
            id="insufficient-kicks-alert"
            style="display: none"
          >
            <strong>Warning:</strong> Player doesn't have enough kicks for this
            entry.
          </div>
          <div class="alert alert-info">
            <strong>Note:</strong> Requeuing will deduct the selected kicks from
            player's balance and add them to the competition queue.
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-warning" id="confirm-requeue">
          Requeue Player
        </button>
      </div>
    </div>
  </div>
</div>
<% } %> <% if (user.role !== 'sales') { %> <% } %>

<!-- HTML5-QRCode library -->
<script src="https://unpkg.com/html5-qrcode@2.0.9/dist/html5-qrcode.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    console.log("Cashier interface loaded");

    // Debug function to check storage state
    function debugStorageState() {
      const userRole = "<%= user.role %>";
      const userId = "<%= user.id %>";
      const STORAGE_KEY = `cashierTransactions_${userRole}_${userId}`;

      console.log("=== STORAGE DEBUG ===");
      console.log("Storage Key:", STORAGE_KEY);
      console.log(
        "Window cached transactions:",
        window.cachedTransactions
          ? window.cachedTransactions.length
          : "undefined"
      );

      try {
        const sessionData = sessionStorage.getItem(STORAGE_KEY);
        const sessionCount = sessionData ? JSON.parse(sessionData).length : 0;
        const localData = localStorage.getItem(STORAGE_KEY);
        const localCount = localData ? JSON.parse(localData).length : 0;
        console.log("LocalStorage transactions:", localCount);
      } catch (e) {
        console.log("Error checking storage:", e);
      }
      console.log("====================");
    }

    // Call debug function immediately and expose it globally
    debugStorageState();
    window.debugStorageState = debugStorageState;

    // Render transactions from cache on page load
    if (window.cachedTransactions && window.cachedTransactions.length > 0) {
      console.log(
        `Rendering ${window.cachedTransactions.length} cached transactions on page load.`
      );
      // Use a timeout to ensure the DOM is fully ready, especially for complex pages.
      setTimeout(() => {
        updateTransactionsTableWithData(window.cachedTransactions);
      }, 0);
    }

    // Helper function to safely get elements - MOVED TO TOP
    function safeGetElement(id) {
      const element = document.getElementById(id);
      if (!element) {
        console.error(`❌ Element with id '${id}' not found in DOM`);
        console.log("Available elements:", Array.from(document.querySelectorAll('[id]')).map(el => el.id));
        return null;
      }
      return element;
    }

    // Verify HTML5QRCode library is loaded
    if (typeof Html5Qrcode === 'undefined') {
      console.error("❌ Html5Qrcode library not loaded! Scanner will not work.");
      const startBtn = document.getElementById("start-scan");
      if (startBtn) {
        startBtn.disabled = true;
        startBtn.textContent = "Scanner Library Not Loaded";
      }
      return;
    }
    console.log("✅ Html5Qrcode library loaded successfully");

    // User role and ID from server
    const userRole = "<%= user.role %>";
    const userId = "<%= user.id %>";
    // Use consistent storage key that matches the initialization script
    const STORAGE_KEY = `cashierTransactions_${userRole}_${userId}`;
    let html5QrCode = null;
    let currentPlayerId = null;

    // QR Scanner - INITIALIZE AFTER EVERYTHING IS READY
    console.log("🔄 Initializing QR Scanner...");
    const startScanBtn = safeGetElement("start-scan");
    const stopScanBtn = safeGetElement("stop-scan");

    if (!startScanBtn) {
      console.error("❌ Start scan button not found! Scanner cannot be initialized.");
      return;
    }

    console.log("✅ Scanner buttons found, attaching event listeners...");

    if (startScanBtn) {
      startScanBtn.addEventListener("click", function () {
        console.log("🎯 Start scan button clicked!");
        try {
          const qrContainer = document.getElementById("qr-reader");
          if (!qrContainer) {
            console.error("❌ QR reader container not found!");
            alert("QR reader container not found. Please refresh the page.");
            return;
          }

          console.log("📱 Initializing Html5Qrcode...");
          html5QrCode = new Html5Qrcode("qr-reader");

          console.log("📹 Starting camera...");
          html5QrCode
            .start(
              { facingMode: "environment" },
              { fps: 10, qrbox: 250 },
              function onScanSuccess(decodedText) {
                console.log("✅ QR Code detected:", decodedText);
                if (html5QrCode) {
                  html5QrCode
                    .stop()
                    .then(function () {
                      console.log("📱 Scanner stopped successfully");
                      const startBtn = document.getElementById("start-scan");
                      const stopBtn = document.getElementById("stop-scan");
                      if (startBtn) startBtn.classList.remove("d-none");
                      if (stopBtn) stopBtn.classList.add("d-none");
                      processQRCode(decodedText);
                    })
                    .catch(function (err) {
                      console.error("❌ Failed to stop scanner:", err);
                    });
                }
              },
              function onScanError(error) {
                // Ignore non-fatal errors
                if (
                  error !==
                  "QR code parse error, error = NotFoundException: No MultiFormat Readers were able to detect the code."
                ) {
                  console.warn("QR scan error:", error);
                }
              }
            )
            .then(function () {
              console.log("✅ Scanner started successfully");
              if (startScanBtn) startScanBtn.classList.add("d-none");
              if (stopScanBtn) stopScanBtn.classList.remove("d-none");
            })
            .catch(function (err) {
              console.error("❌ Failed to start scanner:", err);
              alert(
                "Could not start scanner. Please check camera permissions and ensure you're using HTTPS."
              );
            });
        } catch (err) {
          console.error("❌ Error initializing scanner:", err);
          alert("Could not initialize scanner: " + err.message);
        }
      });
    }

    // Stop scanner button
    if (stopScanBtn) {
      stopScanBtn.addEventListener("click", function () {
        console.log("🛑 Stop scan button clicked!");
        if (html5QrCode) {
          html5QrCode
              .stop()
              .then(function () {
                console.log("✅ Scanner stopped successfully");
                if (startScanBtn) startScanBtn.classList.remove("d-none");
                if (stopScanBtn) stopScanBtn.classList.add("d-none");
              })
              .catch(function (err) {
                console.error("❌ Failed to stop scanner:", err);
                // Reset UI anyway
                if (startScanBtn) startScanBtn.classList.remove("d-none");
                if (stopScanBtn) stopScanBtn.classList.add("d-none");
              });
        } else {
          console.log("⚠️ No scanner instance to stop");
          // Reset UI if scanner object doesn't exist
          if (startScanBtn) startScanBtn.classList.remove("d-none");
          if (stopScanBtn) stopScanBtn.classList.add("d-none");
        }
      });
    }
    } // Close the if (startScanBtn) block

    // Process QR code data
    function processQRCode(qrData) {
      // Show loading indicator in player info area
      document.getElementById("player-info").innerHTML = `
      <div class="text-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Processing QR code...</p>
      </div>
    `;

      // Send QR data to server
      fetch("/cashier/api/scan", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ qrData }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            displayPlayerInfo(data.player);
          } else {
            document.getElementById("player-info").innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i>
            ${data.message}
          </div>
        `;
          }
        })
        .catch((error) => {
          console.error("Error processing QR code:", error);
          document.getElementById("player-info").innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle-fill"></i>
          Error processing QR code. Please try again.
        </div>
      `;
        });
    } // Player Search
    const searchBtn = safeGetElement("search-button");
    if (searchBtn) {
      searchBtn.addEventListener("click", function () {
        const nameInput = safeGetElement("name-search");
        const name = nameInput?.value?.trim();
        if (!name) {
          alert("Please enter a name to search");
          return;
        }

        const results = safeGetElement("search-results");
        if (!results) return;

        // Mark that we're starting a search operation
        window.currentSearchOperation = true;
        results.innerHTML =
          '<div class="text-center"><div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

        // Send search query to server
        fetch(`/cashier/api/search?query=${encodeURIComponent(name)}`)
          .then((response) => response.json())
          .then((data) => {
            if (data.success && data.players.length > 0) {
              // Clear previous results
              results.innerHTML = "";

              // Display each player in the results
              data.players.forEach((player) => {
                const item = document.createElement("button");
                item.className =
                  "list-group-item list-group-item-action d-flex align-items-center";

                // Create avatar element with photo support
                const avatar = createAvatar(player.name, 40, player.photo_path);
                avatar.classList.add("me-3");

                // Create text content
                const textDiv = document.createElement("div");
                textDiv.innerHTML = `<strong>${player.name}</strong><br>${
                  player.phone || "No phone"
                } | ${player.city_village ? player.city_village + ", " : ""}${
                  player.residence || "No residence"
                }`;

                // Add elements to item
                item.appendChild(avatar);
                item.appendChild(textDiv);
                item.onclick = function () {
                  displayPlayerInfo(player);
                };
                results.appendChild(item);
              });
            } else {
              results.innerHTML =
                '<div class="alert alert-warning">No players found matching your search</div>';
              // Reset search flag when no players found
              window.currentSearchOperation = false;
              }
          })
          .catch((error) => {
            console.error("Error searching for players:", error);
            results.innerHTML =
              '<div class="alert alert-danger">Error searching for players. Please try again.</div>';
            // Reset the search operation flag on error
            window.currentSearchOperation = false;
            console.log(
              "Search error - resetting window.currentSearchOperation=false"
            );
          });
      });
    } // Close the if (searchBtn) block

    function displayPlayerInfo(player) {
      const infoDiv = document.getElementById("player-info");

      // Clear previous content
      infoDiv.innerHTML = "";

      // Store current player data globally
      window.currentPlayer = player;

      // Mark that we're in a search operation to prevent page reloads
      window.currentSearchOperation = true;
      console.log(
        "Search operation started - setting window.currentSearchOperation=true"
      );

      // Create container for profile info
      const profileContainer = document.createElement("div");
      profileContainer.className = "text-center mb-3";

      // Create avatar with photo support
      const avatar = createAvatar(player.name, 100, player.photo_path);
      avatar.classList.add("mx-auto", "mb-3", "d-block");

      // Create name and details
      const nameEl = document.createElement("h4");
      nameEl.innerHTML =
        player.name +
        (player.is_child_account
          ? ' <span class="badge bg-info ms-2"><i class="bi bi-person-hearts"></i> Child Account</span>'
          : "");

      const detailsEl = document.createElement("p");
      detailsEl.className = "text-muted";
      const phoneDisplay =
        player.is_child_account && player.parent_phone
          ? `Parent: ${player.parent_phone} | Child ID: ${player.phone}`
          : player.phone;
      detailsEl.textContent = `${phoneDisplay} | ${
        player.city_village ? player.city_village + ", " : ""
      }${player.residence}`;

      // Add elements to container
      profileContainer.appendChild(avatar);
      profileContainer.appendChild(nameEl);
      profileContainer.appendChild(detailsEl);

      // Add container to info div
      infoDiv.appendChild(profileContainer);

      // Add stats card with real data
      const statsCard = document.createElement("div");
      statsCard.className = "card mb-3";
      statsCard.innerHTML = `
      <div class="card-body">
        <h5>Player Stats</h5>
        <div class="row">
          <div class="col-6">
            <p><strong>Kicks Balance:</strong> ${player.kicks_balance || 0}</p>
          </div>
          <div class="col-6">
            <p><strong>Age Group:</strong> ${player.age_group || "Adult"}</p>
          </div>
        </div>
      </div>
    `;
      infoDiv.appendChild(statsCard);

      // Add action buttons with event listeners
      const actionButtons = document.createElement("div");
      actionButtons.className = "d-grid gap-2";

      // Always show Sell Kicks button
      let buttonsHTML =
        '<button class="btn btn-success" id="sell-kicks-btn">Sell Kicks</button>';

      // Only show Requeue Player button for non-sales users
      if (userRole !== "sales") {
        buttonsHTML +=
          '<button class="btn btn-warning" id="requeue-btn">Requeue Player</button>';
      }

      actionButtons.innerHTML = buttonsHTML;
      infoDiv.appendChild(actionButtons);

      // Add event listeners to buttons
      document
        .getElementById("sell-kicks-btn")
        .addEventListener("click", function () {
          openSellKicksModal(player);
        });

      // Only add requeue event listener if button exists (non-sales users)
      const requeueBtn = document.getElementById("requeue-btn");
      if (requeueBtn) {
        requeueBtn.addEventListener("click", function () {
          openRequeueModal(player);
        });
      }

      // Reset search operation flag after player info is fully displayed
      setTimeout(() => {
        console.log(
          "Search operation state before reset:",
          window.currentSearchOperation
        );
        window.currentSearchOperation = false;
        console.log(
          "Search operation completed - resetting window.currentSearchOperation=false"
        );
        // If this was called from a purchase flow, we need to make sure transactions are updated
        if (window.lastTransactionAdded) {
          console.log(
            "Transaction was added during search, refreshing transaction table"
          );
          window.lastTransactionAdded = false;
          loadTodaysTransactions(true);
        }
      }, 500);
    }

    // Modal handler functions
    function openSellKicksModal(player) {
      // Populate modal with player data
      document.getElementById("sell-player-id").value = player.id;
      document.getElementById("sell-player-name").value = player.name;

      // Set up cost calculation
      const kicksQuantityInput = document.getElementById("kicks-quantity");
      const totalCostSpan = document.getElementById("total-cost");
      const purchaseTypeSelect = document.getElementById("purchase-type");
      const purchaseTypeHelp = document.getElementById("purchase-type-help");

      // Function to update total cost
      function updateTotalCost() {
        const quantity = parseInt(kicksQuantityInput.value) || 0;
        totalCostSpan.textContent = quantity.toFixed(2);
      }

      // Function to update purchase type help text (only for non-sales users)
      function updatePurchaseTypeHelp() {
        if (!purchaseTypeHelp) return; // Skip if element doesn't exist (sales users)

        const type = purchaseTypeSelect.value;
        switch (type) {
          case "balance":
            purchaseTypeHelp.textContent =
              "Balance only: Kicks are added to player's account for later use";
            break;
          case "balance-and-kick-no-competition":
            purchaseTypeHelp.textContent =
              "Add to balance + immediate kick opportunity (no competition entry)";
            break;
          case "balance-and-kick-for-competition":
            purchaseTypeHelp.textContent =
              "Add to balance + immediate kick for competition (counts toward standings)";
            break;
        }
      }

      // Add event listeners
      kicksQuantityInput.addEventListener("input", updateTotalCost);

      // Only add purchase type listener if the select element exists (non-sales users)
      if (purchaseTypeSelect && purchaseTypeSelect.tagName === "SELECT") {
        purchaseTypeSelect.addEventListener("change", updatePurchaseTypeHelp);
      }

      // Initialize values
      updateTotalCost();
      updatePurchaseTypeHelp();

      // Show the modal
      const modal = new bootstrap.Modal(
        document.getElementById("sellKicksModal")
      );
      modal.show();
    }

    function openRequeueModal(player) {
      // Populate modal with player data
      document.getElementById("requeue-player-id").value = player.id;
      document.getElementById("requeue-player-name").value = player.name;
      document.getElementById("requeue-kicks-balance").value = `${
        player.kicks_balance || 0
      } kicks`;

      // Set up kicks amount validation
      const kicksAmountInput = document.getElementById("requeue-kicks-amount");
      const warningAlert = document.getElementById("insufficient-kicks-alert");
      const confirmButton = document.getElementById("confirm-requeue");

      // Function to validate kicks amount
      function validateKicksAmount() {
        const requestedKicks = parseInt(kicksAmountInput.value) || 0;
        const availableKicks = player.kicks_balance || 0;

        if (requestedKicks > availableKicks) {
          warningAlert.style.display = "block";
          warningAlert.innerHTML = `<strong>Warning:</strong> Player only has ${availableKicks} kicks but trying to use ${requestedKicks}.`;
          confirmButton.disabled = true;
        } else if (requestedKicks < 1) {
          warningAlert.style.display = "block";
          warningAlert.innerHTML = `<strong>Warning:</strong> Must use at least 1 kick.`;
          confirmButton.disabled = true;
        } else {
          warningAlert.style.display = "none";
          confirmButton.disabled = false;
        }
      }

      // Add event listener for kicks amount input
      kicksAmountInput.addEventListener("input", validateKicksAmount);

      // Set up requeue type help text
      const requeueTypeSelect = document.getElementById("requeue-type");
      const requeueTypeHelp = document.getElementById("requeue-type-help");

      // Function to update requeue type help text
      function updateRequeueTypeHelp() {
        const type = requeueTypeSelect.value;
        switch (type) {
          case "kick-no-competition":
            requeueTypeHelp.textContent =
              "Non-competition kicks are for practice and don't count toward standings";
            break;
          case "kick-for-competition":
            requeueTypeHelp.textContent =
              "Competition kicks count toward standings and leaderboards";
            break;
        }
      }

      // Add event listener for requeue type
      requeueTypeSelect.addEventListener("change", updateRequeueTypeHelp);

      // Initialize validation and help text
      validateKicksAmount();
      updateRequeueTypeHelp();

      // Show the modal
      const modal = new bootstrap.Modal(
        document.getElementById("requeueModal")
      );
      modal.show();
    }

    // Process Sell Kicks
    document
      .getElementById("confirm-sell-kicks")
      .addEventListener("click", function () {
        const form = document.getElementById("sellKicksForm");

        // Capture form values before the async call
        const playerId = form.playerId.value;
        const kicksQuantity = form.kicksQuantity.value;
        const purchaseType = form.purchaseType.value;

        // Show loading state
        this.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status"></span> Processing...';
        this.disabled = true;

        fetch("/cashier/api/purchase-kicks", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            playerId: playerId,
            kicksQuantity: kicksQuantity,
            purchaseType: purchaseType,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Close modal
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("sellKicksModal")
              );
              modal.hide();

              // Update player info with new data
              displayPlayerInfo(data.player);

              // For sales users, reload the page to get fresh transactions with updated preloaded data
              if (userRole === "sales") {
                // Show success message first, then reload
                let purchaseTypeText = "";
                switch (purchaseType) {
                  case "balance":
                    purchaseTypeText = " (added to balance)";
                    break;
                  case "balance-and-kick-no-competition":
                    purchaseTypeText = " (added to balance + practice kick)";
                    break;
                  case "balance-and-kick-for-competition":
                    purchaseTypeText = " (added to balance + competition kick)";
                    break;
                }

                showAlert(
                  "success",
                  `Successfully sold ${kicksQuantity} kicks to ${data.player.name}${purchaseTypeText}! Refreshing...`
                );

                // Reload page after a short delay to show the success message
                setTimeout(() => {
                  // Force a hard reload that bypasses cache
                  window.location.href =
                    window.location.href + "?t=" + Date.now();
                }, 1500);
              } else {
                // For staff users, use the existing logic
                // Reload transactions from backend for persistence (this will include the new transaction)
                loadTodaysTransactions(true); // true = force refresh from server

                // Update queue status
                updateQueueStatus();

                // Show success message
                let purchaseTypeText = "";
                switch (purchaseType) {
                  case "balance":
                    purchaseTypeText = " (added to balance)";
                    break;
                  case "balance-and-kick-no-competition":
                    purchaseTypeText = " (added to balance + practice kick)";
                    break;
                  case "balance-and-kick-for-competition":
                    purchaseTypeText = " (added to balance + competition kick)";
                    break;
                }

                showAlert(
                  "success",
                  `Successfully sold ${kicksQuantity} kicks to ${data.player.name}${purchaseTypeText}!`
                );
              }
            } else {
              showAlert(
                "danger",
                data.message || "Failed to process kick sale"
              );
            }
          })
          .catch((error) => {
            console.error("Error processing kick sale:", error);
            showAlert("danger", "An error occurred while processing the sale");
          })
          .finally(() => {
            // Reset button state
            this.innerHTML = "Process Sale";
            this.disabled = false;
          });
      });

    // Process Requeue
    document
      .getElementById("confirm-requeue")
      .addEventListener("click", function () {
        const form = document.getElementById("requeueForm");
        const playerId = form.elements["playerId"].value;
        const kicksAmount = form.elements["kicksAmount"].value;
        const requeueType = form.elements["requeueType"].value;

        // Map frontend requeueType to backend competitionType
        let competitionType;
        if (requeueType === "kick-for-competition") {
          competitionType = "accuracy"; // Competition kick
        } else {
          competitionType = "practice"; // Non-competition/practice kick
        }

        // Show loading state
        this.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status"></span> Processing...';
        this.disabled = true;

        fetch("/cashier/api/requeue", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            playerId,
            competitionType,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Close modal
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("requeueModal")
              );
              modal.hide();

              // Update player info with new kicks balance
              displayPlayerInfo(data.player);

              // Add requeue to transactions table
              addRequeueToTable(data, data.player, data.ticket);

              // Update queue status
              updateQueueStatus();

              // Show success message
              const competitionText =
                competitionType === "accuracy"
                  ? " for competition"
                  : " (practice)";
              showAlert(
                "success",
                `Successfully requeued ${data.player.name} using 5 kicks${competitionText}!`
              );
            } else {
              showAlert("danger", data.message || "Failed to requeue player");
            }
          })
          .catch((error) => {
            console.error("Error requeuing player:", error);
            showAlert("danger", "An error occurred while requeuing the player");
          })
          .finally(() => {
            // Reset button state
            this.innerHTML = "Requeue Player";
            this.disabled = false;
          });
      });

    // Helper function to show alerts
    function showAlert(type, message) {
      // Remove existing alerts
      const existingAlerts = document.querySelectorAll(".alert-floating");
      existingAlerts.forEach((alert) => alert.remove());

      // Create new alert
      const alertDiv = document.createElement("div");
      alertDiv.className = `alert alert-${type} alert-floating position-fixed`;
      alertDiv.style.cssText =
        "top: 20px; right: 20px; z-index: 9999; min-width: 300px;";
      alertDiv.innerHTML = `
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            ${message}
          `;

      document.body.appendChild(alertDiv);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
    } // Helper function to add transaction to table
    function addTransactionToTable(
      transaction,
      player,
      tickets,
      transactionType = "sale",
      purchaseType = null
    ) {
      try {
        // Mark that a transaction was just added (used by search reset handler)
        window.lastTransactionAdded = true;
        console.log("Setting window.lastTransactionAdded=true");

        // For sales users, we don't reload the page, we update via JS
        if (userRole === "sales") {
          // The addTransactionToTable function now expects an array
          addTransactionToTable([data.transaction]);
        } else {
          // For other users, reload the page to see the new transaction
          window.location.reload();
        }
        return;
      } catch (error) {
        console.error("Error adding transaction to table:", error);
      }
    }

    // Helper function to add requeue to table
    function addRequeueToTable(requeueData, player, ticket) {
      try {
        // For sales users, simply reload the page
        if (userRole === "sales") {
          setTimeout(() => {
            window.location.reload();
          }, 1000);
          return;
        }

        // Regular flow for staff/admin
        const tbody = document.getElementById("transactions-table");
        const noTransactionsRow = document.getElementById(
          "no-transactions-row"
        );

        if (!tbody) {
          console.error("Transaction table body not found");
          return;
        }

        // Remove "no transactions" message if it exists
        if (noTransactionsRow && noTransactionsRow.parentNode === tbody) {
          tbody.removeChild(noTransactionsRow);
        }

        // Create new row
        const row = document.createElement("tr");
        const timestamp = new Date();
        const time = timestamp.toLocaleTimeString("en-US", {
          timeZone: "America/Belize",
          hour12: true,
          hour: "numeric",
          minute: "2-digit",
        });
        const ticketNumber = ticket ? `#${ticket.ticket_number}` : "No Ticket";
        const competitionType = requeueData.isCompetition
          ? " (Competition)"
          : " (Practice)";

        // Create the HTML based on user role
        let rowHTML = `
              <td>${time}</td>
              <td>${player.name}</td>
              <td><span class="badge bg-warning text-dark">Requeue${competitionType}</span></td>
              <td>${
                requeueData.kicksUsed ||
                document.getElementById("requeue-kicks-amount").value
              }</td>
              <td>$0.00 BZD</td>
              <td><%= user.name %></td>`;

        // Add ticket column for non-sales users
        if (userRole !== "sales") {
          rowHTML += `<td>${ticketNumber}</td>`;
        }

        row.innerHTML = rowHTML;

        // Add to top of table
        if (tbody.firstChild) {
          tbody.insertBefore(row, tbody.firstChild);
        } else {
          tbody.appendChild(row);
        }

        // For staff users, normal refresh mechanism - just update last load time
        window.lastTransactionLoad = Date.now();

        // Schedule a refresh to get latest data
        setTimeout(() => {
          loadTodaysTransactions(true);
        }, 1000);
      } catch (error) {
        console.error("Error adding requeue to table:", error);
      }
    }

    // Queue status update
    function updateQueueStatus() {
      fetch("/cashier/api/queue-status")
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            const currentQueueEl = document.getElementById(
              "current-queue-number"
            );
            const nextTicketEl = document.getElementById("next-ticket-number");

            if (currentQueueEl) {
              currentQueueEl.textContent = data.currentNumber || "None";
            }
            if (nextTicketEl) {
              nextTicketEl.textContent = data.nextTicket || "Loading...";
            }
          }
        })
        .catch((error) => {
          console.error("Error updating queue status:", error);
        });
    } // Load today's transactions - FORCED SERVER VERSION WITH BACKUP STORAGE
    function loadTodaysTransactions(forceRefresh = false) {
      // Clear cache if force refresh is requested
      if (forceRefresh) {
        const STORAGE_KEY = `cashierTransactions_${userRole}_${userId}`;
        localStorage.removeItem(STORAGE_KEY);
        sessionStorage.removeItem(STORAGE_KEY);
        window.cachedTransactions = null;
        console.log("Cleared transaction cache due to force refresh");
      }

      // For sales users, handle specially but don't reload page when called from search
      const isFromSearch = window.currentSearchOperation === true;

      // First check if we're in a search operation
      if (isFromSearch) {
        console.log(
          "Currently in search operation - skipping transaction refresh to prevent interruption"
        );
        return;
      }

      if (userRole === "sales") {
        // If this is not an explicit force refresh and we just loaded the page and have preloaded data
        const pageJustLoaded = Date.now() - window.pageLoadTime < 2000;
        if (
          !forceRefresh &&
          pageJustLoaded &&
          window.preloadedFromServer === true
        ) {
          console.log(
            "Page just loaded with preloaded transactions - using server-rendered transactions"
          );
          // Use the preloaded transactions from the server render
          if (
            window.cachedTransactions &&
            window.cachedTransactions.length > 0
          ) {
            console.log(
              `Using ${window.cachedTransactions.length} preloaded transactions from server`
            );
            updateTransactionsTableWithData(window.cachedTransactions);
            return;
          }
        }

        // For sales users: ALWAYS fetch fresh data from server in all other cases
        const timestamp = Date.now();
        const url = `/cashier/api/transactions/today?t=${timestamp}&nocache=${Math.random()}`;

        fetch(url, {
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Pragma: "no-cache",
            Expires: "0",
          },
          credentials: "same-origin", // Include cookies
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(
                `Server returned ${response.status}: ${response.statusText}`
              );
            }
            return response.json();
          })
          .then((data) => {
            // Now we should always get a structured response object, but handle both formats for backward compatibility
            const transactions = Array.isArray(data)
              ? data
              : data.transactions || [];

            // Always ensure we have transactions, even if they're empty
            if (!transactions) {
              console.warn("No transactions array in response:", data);
              return;
            }

            // If it's the new format, log additional info
            if (data.timestamp) {
              .toLocaleTimeString("en-US", {
                  timeZone: "America/Belize",
                  hour12: true,
                  hour: "numeric",
                  minute: "2-digit",
                })
              );
            } else {
              }

            // Update global state
            window.cachedTransactions = transactions;
            window.lastTransactionLoad = Date.now();

            // Store in both localStorage and sessionStorage for persistence
            try {
              localStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
              sessionStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
            } catch (e) {
              console.error("Failed to cache transactions:", e);
            }

            // Render the transactions
            updateTransactionsTableWithData(transactions);
          })
          .catch((err) => {
            console.error(`[${timestamp}] Error refreshing transactions:`, err);
            // If there's an error, try again in 5 seconds
            setTimeout(() => loadTodaysTransactions(true), 5000);
          });
        return;
      }

      // Normal flow for staff/admin users
      console.log(
        "Staff/Admin: Loading today's transactions... forceRefresh:",
        forceRefresh
      );

      // Use cache-busting to prevent browser caching
      const cacheBuster = Date.now();
      const url = `/cashier/api/transactions/today?t=${cacheBuster}`;

      // Always fetch from server
      fetch(url, {
        method: "GET",
        headers: {
          "Cache-Control": "no-cache, no-store",
          Pragma: "no-cache",
        },
        credentials: "same-origin", // Include cookies
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              `Server returned ${response.status}: ${response.statusText}`
            );
          }
          return response.json();
        })
        .then((data) => {
          // Handle both response formats (array or object with transactions property)
          const rawTransactions = Array.isArray(data)
            ? data
            : data.transactions || data;

          if (data.timestamp) {
            .toLocaleTimeString("en-US", {
                timeZone: "America/Belize",
                hour12: true,
                hour: "numeric",
                minute: "2-digit",
              })
            );
          } else {
            console.log(
              "Loaded",
              rawTransactions.length,
              "transactions from server"
            );
          }

          window.lastTransactionLoad = Date.now();

          // Process each transaction to ensure proper numeric conversion
          const processedData = rawTransactions.map((transaction) => {
            return {
              ...transaction,
              amount: parseFloat(transaction.amount || 0),
              kicks_count: parseInt(transaction.kicks_count || 0, 10),
              ticket_number: parseInt(transaction.ticket_number || 0, 10),
            };
          });

          // Remove duplicates based on transaction ID
          const uniqueTransactions = processedData.filter(
            (transaction, index, self) =>
              index === self.findIndex((t) => t.id === transaction.id)
          );

          // Important: Store the deduplicated data both in localStorage and as a global variable
          try {
            // For persistence across page reloads
            localStorage.setItem(
              STORAGE_KEY,
              JSON.stringify(uniqueTransactions)
            );

            // For persistence across page navigation within same session
            sessionStorage.setItem(
              STORAGE_KEY,
              JSON.stringify(uniqueTransactions)
            );

            // Store in a global variable for immediate access
            window.cachedTransactions = uniqueTransactions;

            console.log(
              "Transactions cached in multiple locations:",
              uniqueTransactions.length
            );
          } catch (e) {
            console.error("Failed to cache transactions:", e);
          }

          // Update the table with the deduplicated data
          updateTransactionsTableWithData(uniqueTransactions);
        })
        .catch((error) => {
          console.error("Error loading today's transactions:", error);

          // Try to load from backup sources if server fetch fails
          let backupData = [];
          try {
            // Try to get data from global variable first (best for same-session navigation)
            if (
              window.cachedTransactions &&
              window.cachedTransactions.length > 0
            ) {
              console.log(
                "Using cached transactions from window variable:",
                window.cachedTransactions.length
              );
              backupData = window.cachedTransactions;
            }
            // Try sessionStorage next (good for tab refresh)
            else if (sessionStorage.getItem(STORAGE_KEY)) {
              const sessionData = JSON.parse(
                sessionStorage.getItem(STORAGE_KEY) || "[]"
              );
              backupData = sessionData;
            }
            // Finally try localStorage (good for browser close/reopen)
            else if (localStorage.getItem(STORAGE_KEY)) {
              const localData = JSON.parse(
                localStorage.getItem(STORAGE_KEY) || "[]"
              );
              backupData = localData;
            }
          } catch (storageError) {
            console.error("Failed to retrieve backup data:", storageError);
          }

          updateTransactionsTableWithData(backupData);
        });
    } // Update transactions table with data - PERSISTENCE-FOCUSED VERSION
    function updateTransactionsTableWithData(transactions) {
      // Make sure we have an array of transactions
      if (!transactions) {
        transactions = [];
      }

      // For sales users: be extra aggressive about finding transactions
      if (transactions.length === 0 && userRole === "sales") {
        try {
          // First try to get fresh data from server if we're online
          if (navigator.onLine !== false) {
            // Schedule an async fetch but continue with the function
            setTimeout(() => {
              loadTodaysTransactions(true);
            }, 10);
          }

          // While fetch is happening, try window cache first (fastest, same session)
          if (
            window.cachedTransactions &&
            window.cachedTransactions.length > 0
          ) {
            console.log(
              "Using transactions from window cache:",
              window.cachedTransactions.length
            );
            transactions = window.cachedTransactions;
          }
          // Try session storage next (persists across page refresh)
          else if (sessionStorage.getItem(STORAGE_KEY)) {
            const sessionData = JSON.parse(
              sessionStorage.getItem(STORAGE_KEY) || "[]"
            );
            if (sessionData.length > 0) {
              transactions = sessionData;
            }
          }
          // Try local storage last (persists across browser sessions)
          else if (localStorage.getItem(STORAGE_KEY)) {
            const localData = JSON.parse(
              localStorage.getItem(STORAGE_KEY) || "[]"
            );
            if (localData.length > 0) {
              transactions = localData;
            }
          }
        } catch (e) {
          console.error("Error loading cached transactions:", e);
        }
      } else {
        // Cache the data we were given
        try {
          window.cachedTransactions = transactions;
          localStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
          sessionStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
        } catch (e) {
          console.error("Failed to cache transactions:", e);
        }
      }

      const tbody = safeGetElement("transactions-table");

      if (!tbody) {
        console.error("Transactions table body not found");
        return;
      }

      // Clear existing rows
      tbody.innerHTML = "";

      // Check if we have transactions to display
      if (!transactions || transactions.length === 0) {
        // No transactions - show the "No transactions" message
        const noTransactionsRow = document.createElement("tr");
        noTransactionsRow.id = "no-transactions-row";
        const cell = document.createElement("td");
        cell.colSpan = userRole === "sales" ? 6 : 7; // Updated column count
        cell.className = "text-center";
        cell.textContent = "No transactions recorded today";
        noTransactionsRow.appendChild(cell);
        tbody.appendChild(noTransactionsRow);
        return;
      }

      // Add each transaction
      transactions.forEach((transaction) => {
        const row = document.createElement("tr");

        // Safely parse transaction date with fallback to current time
        let timestamp;
        try {
          timestamp = new Date(transaction.timestamp);
          if (isNaN(timestamp.getTime())) {
            timestamp = new Date(); // Fallback to current time if invalid
          }
        } catch (e) {
          timestamp = new Date(); // Fallback to current time on error
        }

        const time = timestamp.toLocaleTimeString("en-US", {
          timeZone: "America/Belize",
          hour12: true,
          hour: "numeric",
          minute: "2-digit",
        });
        const type =
          transaction.transaction_type === "requeue" ? "Requeue" : "Sale";

        // Ensure amount is properly formatted
        let amount;
        try {
          const amountValue = parseFloat(transaction.amount);
          amount =
            !isNaN(amountValue) && amountValue > 0
              ? `$${amountValue.toFixed(2)} BZD`
              : "-";
        } catch (e) {
          amount = "-";
        }

        // Ensure ticket number is properly formatted
        let ticketNumber;
        try {
          const ticketValue = parseInt(transaction.ticket_number, 10);
          ticketNumber =
            !isNaN(ticketValue) && ticketValue > 0 ? ticketValue : "-";
        } catch (e) {
          ticketNumber = "-";
        }

        // Build row HTML
        row.innerHTML = `
          <td>${time}</td>
          <td>${transaction.player_name || "Unknown"}</td>
          <td><span class="badge ${
            type === "Sale" ? "bg-success" : "bg-warning text-dark"
          }">${type}</span></td>
          <td>${transaction.kicks_count || 0}</td>
          <td>${amount}</td>
          <td>${transaction.staff_name || "<%= user.name %>"}</td>
          ${userRole !== "sales" ? `<td>${ticketNumber}</td>` : ""}
        `;

        tbody.appendChild(row);
      });

      // Log success
      console.log(
        `Successfully rendered ${transactions.length} transactions in the table`
      );
    }
    updateQueueStatus();
    setInterval(updateQueueStatus, 5000);

    // Always load transactions on page initialization
    if (userRole === "sales") {
      // For sales users, immediately try to render any existing transactions
      let foundTransactions = [];

      // First check if we have preloaded data in window cache
      if (window.cachedTransactions && window.cachedTransactions.length > 0) {
        console.log(
          "Found preloaded transactions in window cache:",
          window.cachedTransactions.length
        );
        foundTransactions = window.cachedTransactions;
      }
      // Try sessionStorage next
      else {
        try {
          const sessionData = sessionStorage.getItem(STORAGE_KEY);
          if (sessionData) {
            const parsedData = JSON.parse(sessionData);
            if (parsedData && parsedData.length > 0) {
              foundTransactions = parsedData;
              window.cachedTransactions = parsedData; // Update window cache
            }
          }
        } catch (e) {
          console.error("Error reading from sessionStorage:", e);
        }
      }

      // Try localStorage as last resort
      if (foundTransactions.length === 0) {
        try {
          const localData = localStorage.getItem(STORAGE_KEY);
          if (localData) {
            const parsedData = JSON.parse(localData);
            if (parsedData && parsedData.length > 0) {
              foundTransactions = parsedData;
              window.cachedTransactions = parsedData; // Update window cache
            }
          }
        } catch (e) {
          console.error("Error reading from localStorage:", e);
        }
      }

      // If we found any transactions, render them immediately
      if (foundTransactions.length > 0) {
        console.log(
          `Rendering ${foundTransactions.length} cached transactions immediately`
        );
        updateTransactionsTableWithData(foundTransactions);
      } else {
        console.log("No cached transactions found, loading from server");
        loadTodaysTransactions(true); // Force a server fetch
      }
    } else {
      // For staff/admin, use normal loading
      loadTodaysTransactions();
    }

    // Set up global state tracking
    window.pageLoadTime = Date.now(); // Track when the page was loaded
    window.lastTransactionLoad = Date.now();
    window.lastTransactionAdded = false; // Track when new transactions are added
    window.currentSearchOperation = false; // Track if a search is in progress

    // Handle visibility changes (user switching tabs/windows)
    document.addEventListener("visibilitychange", function () {
      if (document.visibilityState === "visible") {
        console.log("Page became visible, reloading transactions");
        loadTodaysTransactions(true); // true = force refresh from server
      }
    });

    // For sales users, use more aggressive reload strategies
    if (userRole === "sales") {
      // Handle page show event (triggered on back/forward navigation)
      window.addEventListener("pageshow", function (event) {
        // If the page is loaded from cache (navigation back to page)
        if (event.persisted) {
          console.log(
            "Page was loaded from cache (back navigation), forcing reload"
          );

          // For the most reliable experience, reload the whole page for sales users
          // This ensures the server provides fresh data
          window.location.reload();
        } else {
          console.log("Fresh page load, transactions should be pre-loaded");
        }
      });

      // Add timestamp to all forms as hidden field to prevent caching
      document.querySelectorAll("form").forEach(function (form) {
        const timeField = document.createElement("input");
        timeField.type = "hidden";
        timeField.name = "timestamp";
        timeField.value = Date.now().toString();
        form.appendChild(timeField);
      });
    }

    // Setup more aggressive refreshing for sales users
    const isRefreshNeeded = userRole === "sales";
    const refreshInterval = isRefreshNeeded ? 30000 : 60000; // 30 seconds for sales, 1 minute for others

    // Periodically check for transaction updates
    (function checkForReload() {
      // If it's been more than refreshInterval since last load, reload transactions
      if (
        Date.now() - window.lastTransactionLoad > refreshInterval &&
        document.visibilityState === "visible"
      ) {
        console.log("Reloading transactions (periodic check)");
        loadTodaysTransactions(true); // true = force refresh from server
      }

      // Check again after a short interval
      setTimeout(checkForReload, 5000); // Check every 5 seconds
    })();

    // Add listeners for all navigation events that might indicate we need fresh data

    // Event: URL hash changes (common in single-page apps)
    window.addEventListener("hashchange", function () {
      console.log("Hash changed, reloading transactions");
      loadTodaysTransactions(true);
    });

    // Event: Window gets focus
    window.addEventListener("focus", function () {
      console.log("Window focused, reloading transactions");
      loadTodaysTransactions(true);
    });

    // Event: History navigation (back/forward buttons)
    window.addEventListener("popstate", function () {
      console.log("Navigation occurred, reloading transactions");
      loadTodaysTransactions(true);
    });

    // Event: Document becomes interactive (DOMContentLoaded already happened at the start)
    document.addEventListener("readystatechange", function () {
      if (
        document.readyState === "interactive" ||
        document.readyState === "complete"
      ) {
        console.log("Document ready state changed, reloading transactions");
        loadTodaysTransactions(true);
      }
    });

    // Force a refresh periodically even when page is visible
    setInterval(function () {
      if (document.visibilityState === "visible") {
        console.log("Periodic forced refresh from server");
        loadTodaysTransactions(true); // true = force refresh from server
      }
    }, refreshInterval);

    // Critical for sales users: Handle page before unload (navigation, refresh, close)
    window.addEventListener("beforeunload", function () {
      // Ensure all cached transactions are saved to both storage types
      if (window.cachedTransactions && window.cachedTransactions.length > 0) {
        try {
          localStorage.setItem(
            STORAGE_KEY,
            JSON.stringify(window.cachedTransactions)
          );
          sessionStorage.setItem(
            STORAGE_KEY,
            JSON.stringify(window.cachedTransactions)
          );
          console.log(
            "Saved cached transactions before page unload:",
            window.cachedTransactions.length
          );
        } catch (e) {
          console.error("Failed to save transactions on page unload:", e);
        }
      }
    });

    // Handle page load/refresh to restore transactions
    if (userRole === "sales") {
      try {
        // This ensures we have any transactions from previous sessions
        const storedTransactions = JSON.parse(
          localStorage.getItem(STORAGE_KEY) ||
            sessionStorage.getItem(STORAGE_KEY) ||
            "[]"
        );
        if (storedTransactions.length > 0) {
          console.log(
            "Found stored transactions on page load:",
            storedTransactions.length
          );
          window.cachedTransactions = storedTransactions;

          // Add a small delay before updating the table to ensure DOM is ready
          setTimeout(() => {
            updateTransactionsTableWithData(storedTransactions);
          }, 500);
        }
      } catch (e) {
        console.error("Error restoring transactions on page load:", e);
      }
    }
  });
</script>

<!-- Load avatar script for player profile images -->
<script src="/js/avatar.js"></script>
